<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Sep 09 20:55:34 2021
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; System_Init &rArr; Device_Init &rArr; IMU_Init &rArr; BMI_Init &rArr; Set_accel &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4e1]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[24]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">ADC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[c]">BusFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[26]">CAN1_RX0_IRQHandler</a> from can1.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[27]">CAN1_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[28]">CAN1_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[25]">CAN1_TX_IRQHandler</a> from can1.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[52]">CAN2_RX0_IRQHandler</a> from can2.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[53]">CAN2_RX1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[54]">CAN2_SCE_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[51]">CAN2_TX_IRQHandler</a> from can2.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[68]">CHASSIS_TASK</a> from go.o(.text) referenced from freertos_init.o(.text)
 <LI><a href="#[61]">CRYP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[60]">DCMI_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[21]">DMA1_Stream4_IRQHandler</a> from uart4.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[22]">DMA1_Stream5_IRQHandler</a> from remote.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[23]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[41]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4c]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4d]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4e]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[f]">DebugMon_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[4f]">ETH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[50]">ETH_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[18]">EXTI0_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3a]">EXTI15_10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[19]">EXTI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1a]">EXTI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1b]">EXTI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[1c]">EXTI4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[29]">EXTI9_5_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[16]">FLASH_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[63]">FPU_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[42]">FSMC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[69]">GIMBAL_TASK</a> from go.o(.text) referenced from freertos_init.o(.text)
 <LI><a href="#[62]">HASH_RNG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[a]">HardFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[32]">I2C1_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[31]">I2C1_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[34]">I2C2_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[33]">I2C2_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5b]">I2C3_ER_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5a]">I2C3_EV_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6d]">IMU_TASK</a> from go.o(.text) referenced from freertos_init.o(.text)
 <LI><a href="#[6f]">MASTERLINK_TASK</a> from go.o(.text) referenced from freertos_init.o(.text)
 <LI><a href="#[6b]">MODULE_TASK</a> from go.o(.text) referenced from freertos_init.o(.text)
 <LI><a href="#[b]">MemManage_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[9]">NMI_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[66]">NMI_Handler_Hint</a> from led.o(.text) referenced from stm32f4xx_it.o(.text)
 <LI><a href="#[55]">OTG_FS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3c]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5d]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5c]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5f]">OTG_HS_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[5e]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6e]">PID_TASK</a> from go.o(.text) referenced from freertos_init.o(.text)
 <LI><a href="#[13]">PVD_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[10]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[17]">RCC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[73]">RC_Err_Hint</a> from led.o(.text) referenced from remote.o(.text)
 <LI><a href="#[74]">RC_Lost_Hint</a> from led.o(.text) referenced from remote.o(.text)
 <LI><a href="#[72]">RC_Mode_Change_Hint</a> from led.o(.text) referenced 2 times from remote.o(.text)
 <LI><a href="#[6a]">RIFLE_TASK</a> from go.o(.text) referenced from freertos_init.o(.text)
 <LI><a href="#[3b]">RTC_Alarm_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[15]">RTC_WKUP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[8]">Reset_Handler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[43]">SDIO_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[35]">SPI1_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[36]">SPI2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[45]">SPI3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[67]">SYSTEM_STATE_TASK</a> from go.o(.text) referenced from freertos_init.o(.text)
 <LI><a href="#[11]">SysTick_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[64]">SystemInit</a> from system_stm32f4xx.o(.text) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[71]">System_Alive_Hint</a> from led.o(.text) referenced 2 times from system_state.o(.text)
 <LI><a href="#[fb]">System_Start_Task</a> from freertos_init.o(.text) referenced from freertos_init.o(.text)
 <LI><a href="#[14]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2a]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2d]">TIM1_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2c]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2b]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2e]">TIM2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[2f]">TIM3_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[30]">TIM4_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[44]">TIM5_IRQHandler</a> from go.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[48]">TIM6_DAC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[49]">TIM7_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3d]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[40]">TIM8_CC_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3f]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[3e]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[46]">UART4_IRQHandler</a> from uart4.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[47]">UART5_IRQHandler</a> from referee.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[37]">USART1_IRQHandler</a> from uart1.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[38]">USART2_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[39]">USART3_IRQHandler</a> from uart3.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[59]">USART6_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[d]">UsageFault_Handler</a> from stm32f4xx_it.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[6c]">VISION_TASK</a> from go.o(.text) referenced from freertos_init.o(.text)
 <LI><a href="#[70]">VISION_TRIGGER_TASK</a> from go.o(.text) referenced from freertos_init.o(.text)
 <LI><a href="#[12]">WWDG_IRQHandler</a> from startup_stm32f40xx.o(.text) referenced from startup_stm32f40xx.o(RESET)
 <LI><a href="#[78]">__main</a> from __main.o(!!!main) referenced from startup_stm32f40xx.o(.text)
 <LI><a href="#[75]">prvIdleTask</a> from tasks.o(.text) referenced from tasks.o(.text)
 <LI><a href="#[77]">prvTaskExitError</a> from port.o(.text) referenced from port.o(.text)
 <LI><a href="#[76]">prvTimerTask</a> from timers.o(.text) referenced from timers.o(.text)
 <LI><a href="#[273]">user_delay_us</a> from bmi2_common.o(.text) referenced from bmi2_common.o(.text)
 <LI><a href="#[275]">user_i2c_reg_read</a> from bmi2_common.o(.text) referenced from bmi2_common.o(.text)
 <LI><a href="#[274]">user_i2c_reg_write</a> from bmi2_common.o(.text) referenced from bmi2_common.o(.text)
 <LI><a href="#[277]">user_spi_reg_read</a> from bmi2_common.o(.text) referenced from bmi2_common.o(.text)
 <LI><a href="#[278]">user_spi_reg_write</a> from bmi2_common.o(.text) referenced from bmi2_common.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[78]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[79]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[7b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[505]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[506]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[507]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[508]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[509]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[83]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[7c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[7e]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[50a]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[50b]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[50c]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[50d]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[50e]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[50f]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[510]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[511]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[512]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[513]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[514]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[515]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[516]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[517]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[518]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[519]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[51a]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[51b]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[51c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[51d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[88]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[51e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[51f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[520]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[521]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[522]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[523]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[524]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[7a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[525]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[80]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[82]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[526]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[84]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; System_Init &rArr; Device_Init &rArr; IMU_Init &rArr; BMI_Init &rArr; Set_accel &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[527]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4e2]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[87]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[528]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[89]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4ce]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[4cd]"></a>__asm___6_port_c_39a90d8d__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[10]"></a>PendSV_Handler</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4cf]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[529]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[4e4]"></a>_ttywrch</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[8a]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[52a]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[52b]"></a>uart_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usart.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[4e1]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f40xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[52c]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_Cnt_Init
</UL>

<P><STRONG><a name="[52d]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[52e]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_init
</UL>

<P><STRONG><a name="[8c]"></a>GPIO_DeInit</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphResetCmd
</UL>

<P><STRONG><a name="[11b]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Clip_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Friction_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hint_Led_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AimLED_Init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VisionTrigger_Init
</UL>

<P><STRONG><a name="[52f]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[530]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[531]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[532]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[533]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[534]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Mode_Change_Hint
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Err_Hint
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Lost_Hint
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Alive_Hint
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hint_Led_Init
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_ON
</UL>

<P><STRONG><a name="[131]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler_Hint
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Mode_Change_Hint
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Err_Hint
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AimLED_Init
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_OFF
</UL>

<P><STRONG><a name="[535]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[536]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[537]"></a>GPIO_ToggleBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Clip_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Friction_Init
</UL>

<P><STRONG><a name="[538]"></a>RCC_DeInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[539]"></a>RCC_HSEConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[8e]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[53a]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[53b]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[53c]"></a>RCC_LSEConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[53d]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[53e]"></a>RCC_PLLConfig</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[53f]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[540]"></a>RCC_PLLI2SConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[541]"></a>RCC_PLLI2SCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[542]"></a>RCC_PLLSAIConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[543]"></a>RCC_PLLSAICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[544]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[545]"></a>RCC_MCO1Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[546]"></a>RCC_MCO2Config</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[547]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[548]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[549]"></a>RCC_HCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[54a]"></a>RCC_PCLK1Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[54b]"></a>RCC_PCLK2Config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 222 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycleCounterInit
</UL>

<P><STRONG><a name="[54c]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[54d]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[54e]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[54f]"></a>RCC_I2SCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[550]"></a>RCC_SAIPLLI2SClkDivConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[551]"></a>RCC_SAIPLLSAIClkDivConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[552]"></a>RCC_SAIBlockACLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[553]"></a>RCC_SAIBlockBCLKConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[554]"></a>RCC_LTDCCLKDivConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[555]"></a>RCC_TIMCLKPresConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Clip_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Friction_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hint_Led_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AimLED_Init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VisionTrigger_Init
</UL>

<P><STRONG><a name="[556]"></a>RCC_AHB2PeriphClockCmd</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[557]"></a>RCC_AHB3PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_Cnt_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Friction_Init
</UL>

<P><STRONG><a name="[13d]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Clip_Init
</UL>

<P><STRONG><a name="[8d]"></a>RCC_AHB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[558]"></a>RCC_AHB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[559]"></a>RCC_AHB3PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>

<P><STRONG><a name="[91]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[55a]"></a>RCC_AHB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[55b]"></a>RCC_AHB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[55c]"></a>RCC_AHB3PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[55d]"></a>RCC_APB1PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[55e]"></a>RCC_APB2PeriphClockLPModeCmd</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[55f]"></a>RCC_ITConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[560]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[561]"></a>RCC_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[562]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>TIM_DeInit</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[135]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_Cnt_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Clip_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Friction_Init
</UL>

<P><STRONG><a name="[563]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[564]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[565]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[566]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[567]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[568]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[569]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[56a]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[56b]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Clip_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Friction_Init
</UL>

<P><STRONG><a name="[56c]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[56d]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_Cnt_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Friction_Init
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clip_turn
</UL>

<P><STRONG><a name="[136]"></a>TIM_OC1Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Friction_Init
</UL>

<P><STRONG><a name="[137]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Clip_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Friction_Init
</UL>

<P><STRONG><a name="[56e]"></a>TIM_OC3Init</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[56f]"></a>TIM_OC4Init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[570]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[571]"></a>TIM_SelectOCxM</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[572]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[3fa]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clip_Open
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clip_Close
</UL>

<P><STRONG><a name="[573]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[574]"></a>TIM_SetCompare4</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[575]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[576]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[577]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[578]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Friction_Init
</UL>

<P><STRONG><a name="[139]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Clip_Init
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Friction_Init
</UL>

<P><STRONG><a name="[579]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[57a]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[57b]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[57c]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[57d]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[57e]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[57f]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[580]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[581]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[582]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[583]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[584]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[585]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[586]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[587]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[588]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[589]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[58a]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[58b]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[99]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[97]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[95]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[93]"></a>TIM_ICInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[58c]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[58d]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[58e]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[58f]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[590]"></a>TIM_GetCapture4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[591]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[592]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Clip_Init
</UL>

<P><STRONG><a name="[593]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[594]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_Cnt_Init
</UL>

<P><STRONG><a name="[595]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[596]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[597]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[dd]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[de]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
</UL>

<P><STRONG><a name="[598]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[599]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[59a]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[59b]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[9d]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[9f]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[a1]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[a0]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[a2]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[59c]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[59d]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[59e]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[59f]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5a0]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[5a1]"></a>TIM_RemapConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_tim.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>USART_DeInit</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_Init
</UL>

<P><STRONG><a name="[a4]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
</UL>

<P><STRONG><a name="[5a2]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5a3]"></a>USART_ClockInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5a4]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
</UL>

<P><STRONG><a name="[5a5]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5a6]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5a7]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_SendChar
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendChar
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_SendChar
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_SendChar
</UL>

<P><STRONG><a name="[5a8]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5a9]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5aa]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5ab]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5ac]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5ad]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5ae]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5af]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5b0]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5b1]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5b2]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5b3]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[5b4]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
</UL>

<P><STRONG><a name="[151]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
</UL>

<P><STRONG><a name="[15a]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_SendChar
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendChar
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_SendChar
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_SendChar
</UL>

<P><STRONG><a name="[5b5]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>USART_GetITStatus</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f4xx_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[5b6]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_usart.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(.text)
</UL>
<P><STRONG><a name="[5b7]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, system_stm32f4xx.o(.text), UNUSED)

<P><STRONG><a name="[a7]"></a>CAN_DeInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
</UL>

<P><STRONG><a name="[11e]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[11f]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[12c]"></a>CAN_StructInit</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
</UL>

<P><STRONG><a name="[5b8]"></a>CAN_SlaveStartBank</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[5b9]"></a>CAN_DBGFreeze</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[5ba]"></a>CAN_TTComModeCmd</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>CAN_Transmit</STRONG> (Thumb, 304 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_DUM_Send
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_DUM_Send
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Send
</UL>

<P><STRONG><a name="[5bb]"></a>CAN_TransmitStatus</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[5bc]"></a>CAN_CancelTransmit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>CAN_Receive</STRONG> (Thumb, 240 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[5bd]"></a>CAN_FIFORelease</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[5be]"></a>CAN_MessagePending</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[5bf]"></a>CAN_OperatingModeRequest</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[5c0]"></a>CAN_Sleep</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[5c1]"></a>CAN_WakeUp</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[5c2]"></a>CAN_GetLastErrorCode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[5c3]"></a>CAN_GetReceiveErrorCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[5c4]"></a>CAN_GetLSBTransmitErrorCounter</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
</UL>

<P><STRONG><a name="[5c5]"></a>CAN_GetFlagStatus</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[5c6]"></a>CAN_ClearFlag</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>CAN_GetITStatus</STRONG> (Thumb, 310 bytes, Stack size 16 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>CAN_ClearITPendingBit</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_TX_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_TX_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>DMA_DeInit</STRONG> (Thumb, 324 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_DMA_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RX_DMA_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_DMA_Init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_DMA_Init
</UL>

<P><STRONG><a name="[14d]"></a>DMA_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_DMA_Init
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RX_DMA_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_DMA_Init
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_DMA_Init
</UL>

<P><STRONG><a name="[5c7]"></a>DMA_StructInit</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_Init
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_DMA_Init
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RX_DMA_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_DMA_SentData
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_DMA_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_DMA_Init
</UL>

<P><STRONG><a name="[5c8]"></a>DMA_PeriphIncOffsetSizeConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[5c9]"></a>DMA_FlowControllerConfig</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_DMA_SentData
</UL>

<P><STRONG><a name="[154]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[5ca]"></a>DMA_DoubleBufferModeConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[5cb]"></a>DMA_DoubleBufferModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[5cc]"></a>DMA_MemoryTargetConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[5cd]"></a>DMA_GetCurrentMemoryTarget</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[5ce]"></a>DMA_GetCmdStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[5cf]"></a>DMA_GetFIFOStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[5d0]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, stm32f4xx_dma.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>DMA_ClearFlag</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>DMA_ITConfig</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_Init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_DMA_Init
</UL>

<P><STRONG><a name="[156]"></a>DMA_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
</UL>

<P><STRONG><a name="[328]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[113]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[114]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[115]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>

<P><STRONG><a name="[116]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[5d1]"></a>IWDG_GetFlagStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_iwdg.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = main &rArr; System_Init &rArr; Device_Init &rArr; IMU_Init &rArr; BMI_Init &rArr; Set_accel &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9]"></a>NMI_Handler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NMI_Handler &rArr; System_LED_Hint
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_LED_Hint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>Device_Init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, go.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Device_Init &rArr; IMU_Init &rArr; BMI_Init &rArr; Set_accel &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[b3]"></a>Function_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, go.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Function_Init &rArr; Vision_Init &rArr; VisionTrigger_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAimInit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[aa]"></a>System_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, go.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = System_Init &rArr; Device_Init &rArr; IMU_Init &rArr; BMI_Init &rArr; Set_accel &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_Init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>SYSTEM_STATE_TASK</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, go.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SYSTEM_STATE_TASK &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_Ctrl
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_StateSyne
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_StateSync
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_LED_Hint
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_init.o(.text)
</UL>
<P><STRONG><a name="[69]"></a>GIMBAL_TASK</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, go.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = GIMBAL_TASK &rArr; GIMBAL_Ctrl &rArr; GIM_KET_Ctrl &rArr; GIM_Keyboard_Ctrl &rArr; Keyboard_Ctrl_YAW &rArr; AutoAimYaw_Ctrl &rArr; AutoAim_Algorithm &rArr; Get_AccelData
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Reset
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_GET_Info
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_init.o(.text)
</UL>
<P><STRONG><a name="[68]"></a>CHASSIS_TASK</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, go.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CHASSIS_TASK &rArr; CHASSIS_Ctrl &rArr; CHAS_RC_Ctrl &rArr; CHAS_SPIN &rArr; CHAS_Handler &rArr; CHAS_Output &rArr; Judge_IF_NAN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Reset
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_GET_Info
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASSIS_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_init.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>MODULE_TASK</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, go.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MODULE_TASK &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Reset
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_GetInfo
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_init.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>RIFLE_TASK</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, go.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RIFLE_TASK &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Reset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GET_Info
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_init.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>IMU_TASK</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, go.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = IMU_TASK &rArr; IMU_Ctrl &rArr; IMU_get_angle_to_use &rArr; BMI_Get_EulerAngle &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_init.o(.text)
</UL>
<P><STRONG><a name="[6c]"></a>VISION_TASK</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, go.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VISION_TASK &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Reset
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_GET_Info
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_init.o(.text)
</UL>
<P><STRONG><a name="[6e]"></a>PID_TASK</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, go.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PID_TASK &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Reset
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_GET_Info
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Ctrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_init.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>VISION_TRIGGER_TASK</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, go.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = VISION_TRIGGER_TASK &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_init.o(.text)
</UL>
<P><STRONG><a name="[44]"></a>TIM5_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, go.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM5_IRQHandler &rArr; Trigger &rArr; Trigger_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>MASTERLINK_TASK</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, go.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MASTERLINK_TASK &rArr; vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Sent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_init.o(.text)
</UL>
<P><STRONG><a name="[e0]"></a>ZIGBEE_TASK</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, go.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZIGBEE_SendData
</UL>

<P><STRONG><a name="[e2]"></a>CUSUI_TASK</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, go.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startjudge_task
</UL>

<P><STRONG><a name="[e4]"></a>SONIC_TASK</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, go.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sonic_Ctrl
</UL>

<P><STRONG><a name="[2b2]"></a>Slope</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
</UL>

<P><STRONG><a name="[3a4]"></a>constrain</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Remote_Ctrl
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Keyboard_Ctrl
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Algorithm
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl_PIT
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_PIT
</UL>

<P><STRONG><a name="[464]"></a>anti_constrain</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Algorithm
</UL>

<P><STRONG><a name="[e9]"></a>micros</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_CAN2_Normal
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_DUM_Normal
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_CAN1_Normal
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataUpdate
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_time_cal
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_get_angle_to_use
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_RC_Lost
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_Refer_Normal
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[296]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnt
</UL>

<P><STRONG><a name="[e7]"></a>systemInit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycleCounterInit
</UL>

<P><STRONG><a name="[e8]"></a>Single_time_cal</STRONG> (Thumb, 212 bytes, Stack size 4 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Single_time_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[c0]"></a>Time_Init</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Time_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[ea]"></a>Judge_IF_NAN</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Judge_IF_NAN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Output
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Output
</UL>

<P><STRONG><a name="[ec]"></a>Get_CHAS_Data</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, zigbee_upper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Report_Speed_RF
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Report_Speed_RB
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Report_Speed_LF
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Report_Speed_LB
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZIGBEE_SendData
</UL>

<P><STRONG><a name="[e1]"></a>ZIGBEE_SendData</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, zigbee_upper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CHAS_Data
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZIGBEE_TASK
</UL>

<P><STRONG><a name="[f4]"></a>ZIGBEE_ReceiveData</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, zigbee_upper.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[b6]"></a>Delay_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, freertos_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[f9]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, freertos_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS103_FLY_Explore
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS103_FL_Explore
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS103_FR_Explore
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS103_R_Explore
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_xms
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delay_us
</UL>

<P><STRONG><a name="[f7]"></a>delay_ms</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, freertos_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
</UL>

<P><STRONG><a name="[fa]"></a>delay_xms</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, freertos_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[fb]"></a>System_Start_Task</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, freertos_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = System_Start_Task &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> freertos_init.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>FreeRTOS_Init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, freertos_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = FreeRTOS_Init &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[101]"></a>KS103_R_Explore</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sonic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendChar
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sonic_Ctrl
</UL>

<P><STRONG><a name="[103]"></a>KS103_FR_Explore</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sonic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_SendChar
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sonic_Ctrl
</UL>

<P><STRONG><a name="[105]"></a>KS103_FL_Explore</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, sonic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_SendChar
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sonic_Ctrl
</UL>

<P><STRONG><a name="[107]"></a>KS103_FLY_Explore</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sonic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_SendChar
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sonic_Ctrl
</UL>

<P><STRONG><a name="[e5]"></a>Sonic_Ctrl</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sonic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS103_FLY_Explore
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS103_FL_Explore
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS103_FR_Explore
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS103_R_Explore
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SONIC_TASK
</UL>

<P><STRONG><a name="[5d2]"></a>Sonic_ReadData_Fly</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sonic.o(.text), UNUSED)

<P><STRONG><a name="[5d3]"></a>Sonic_ReadData_FL</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sonic.o(.text), UNUSED)

<P><STRONG><a name="[5d4]"></a>Sonic_ReadData_FR</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sonic.o(.text), UNUSED)

<P><STRONG><a name="[5d5]"></a>Sonic_ReadData_R</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, sonic.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>Judge_IF_Fly</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sonic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Park_Judge_R
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Park_Judge_Z
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Park_Judge_F
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IMU_Info
</UL>

<P><STRONG><a name="[108]"></a>Park_Judge_F</STRONG> (Thumb, 134 bytes, Stack size 4 bytes, sonic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Park_Judge_F
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_Fly
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IMU_Info
</UL>

<P><STRONG><a name="[10a]"></a>Park_Judge_Z</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, sonic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Park_Judge_Z
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_Fly
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IMU_Info
</UL>

<P><STRONG><a name="[10b]"></a>Park_Judge_R</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, sonic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Park_Judge_R
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_Fly
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IMU_Info
</UL>

<P><STRONG><a name="[10c]"></a>CHAS_Park_FB_Speed</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sonic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Park_Fmove
</UL>

<P><STRONG><a name="[10e]"></a>CHAS_Park_LR_Speed</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, sonic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Park_Rmove
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Park_Fmove
</UL>

<P><STRONG><a name="[110]"></a>CHAS_Park_Z_Speed</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sonic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Park_Zmove
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Park_Fmove
</UL>

<P><STRONG><a name="[c1]"></a>IWDG_Init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, iwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[c4]"></a>IWDG_Feed</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, iwdg.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IWDG_Feed
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Report_IF_NAN
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Report_IF_NAN
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_STATE_TASK
</UL>

<P><STRONG><a name="[b8]"></a>CAN1_Init</STRONG> (Thumb, 262 bytes, Stack size 48 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CAN1_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[121]"></a>CAN1_Send</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN1_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Output
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Output
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Stop
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Stop
</UL>

<P><STRONG><a name="[123]"></a>CAN1_DUM_Send</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN1_DUM_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Sent
</UL>

<P><STRONG><a name="[125]"></a>Data_Decode</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Data_Decode
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataUpdate
</UL>

<P><STRONG><a name="[124]"></a>DataUpdate</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DataUpdate &rArr; Data_Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Block_num
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Data_Receive
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Decode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[26]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; DataUpdate &rArr; Data_Decode
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataUpdate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN1_TX_IRQHandler &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[12a]"></a>Judge_IF_CAN1_Normal</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Judge_IF_CAN1_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_StateSyne
</UL>

<P><STRONG><a name="[12b]"></a>Judge_IF_DUM_Normal</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, can1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_StateSyne
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_GetInfo
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRE_switch
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_SingleHeat_ShootAllow
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_Heat_ShootAllow
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_SetInitNum
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_Speed_Change
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_limit
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_PowerLimit
</UL>

<P><STRONG><a name="[b9]"></a>CAN2_Init</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, can2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CAN2_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_StructInit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[52]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, can2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Decode
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, can2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN2_TX_IRQHandler &rArr; CAN_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ClearITPendingBit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[12d]"></a>CAN2_Send</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, can2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CAN2_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Stop
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Output
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_stop
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_Handler
</UL>

<P><STRONG><a name="[12e]"></a>CAN2_DUM_Send</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, can2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
</UL>

<P><STRONG><a name="[12f]"></a>Judge_IF_CAN2_Normal</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, can2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Judge_IF_CAN2_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_StateSyne
</UL>

<P><STRONG><a name="[130]"></a>AimLED_Init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = AimLED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
</UL>

<P><STRONG><a name="[132]"></a>Hint_Led_Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Hint_Led_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Init
</UL>

<P><STRONG><a name="[ba]"></a>Led_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Led_Init &rArr; Hint_Led_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hint_Led_Init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AimLED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[71]"></a>System_Alive_Hint</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System_Alive_Hint
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 2]<UL><LI> system_state.o(.text)
<LI> led.o(.text)
</UL>
<P><STRONG><a name="[74]"></a>RC_Lost_Hint</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RC_Lost_Hint
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remote.o(.text)
</UL>
<P><STRONG><a name="[73]"></a>RC_Err_Hint</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RC_Err_Hint
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remote.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>NMI_Handler_Hint</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NMI_Handler_Hint
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_it.o(.text)
</UL>
<P><STRONG><a name="[5d6]"></a>HardFault_Handler_Hint</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[5d7]"></a>BusFault_Handler_Hint</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, led.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>RC_Mode_Change_Hint</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RC_Mode_Change_Hint
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Address Reference Count : 1]<UL><LI> remote.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>System_LED_Hint</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = System_LED_Hint
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_STATE_TASK
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>

<P><STRONG><a name="[134]"></a>PWM_Friction_Init</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PWM_Friction_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Init
</UL>

<P><STRONG><a name="[13c]"></a>PWM_Clip_Init</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = PWM_Clip_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clip_Init
</UL>

<P><STRONG><a name="[13f]"></a>Trigger_Cnt_Init</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>

<P><STRONG><a name="[141]"></a>IIC_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_user_i2c_init
</UL>

<P><STRONG><a name="[142]"></a>IIC_Start</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Start &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_reg_write
</UL>

<P><STRONG><a name="[143]"></a>IIC_Stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_reg_write
</UL>

<P><STRONG><a name="[144]"></a>IIC_Wait_Ack</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Wait_Ack &rArr; IIC_Stop &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_reg_write
</UL>

<P><STRONG><a name="[145]"></a>IIC_Ack</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_Ack &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[146]"></a>IIC_NAck</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[147]"></a>IIC_Send_Byte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_reg_write
</UL>

<P><STRONG><a name="[148]"></a>IIC_Read_Byte</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[149]"></a>MPU_Read_Byte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, myiic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MPU_Read_Byte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_ACC
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_GRO
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_AUX
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_i2c_reg_read
</UL>

<P><STRONG><a name="[14a]"></a>MPU_Write_Byte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, myiic.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>

<P><STRONG><a name="[14b]"></a>UART4_DMA_Init</STRONG> (Thumb, 188 bytes, Stack size 64 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UART4_DMA_Init &rArr; DMA_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Init
</UL>

<P><STRONG><a name="[bd]"></a>UART4_Init</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART4_Init &rArr; UART4_DMA_Init &rArr; DMA_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[46]"></a>UART4_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART4_IRQHandler &rArr; VISION_ReadData &rArr; Verify_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_ReadData
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_time_cal
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Stream4_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[158]"></a>UART4_DMA_SentData</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART4_DMA_SentData
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_SendData
</UL>

<P><STRONG><a name="[106]"></a>UART4_SendChar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS103_FL_Explore
</UL>

<P><STRONG><a name="[15c]"></a>USART1_RX_DMA_Init</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART1_RX_DMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Init
</UL>

<P><STRONG><a name="[15d]"></a>USART1_DMA_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART1_DMA_Init &rArr; USART1_RX_DMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RX_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Init
</UL>

<P><STRONG><a name="[be]"></a>USART1_Init</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART1_Init &rArr; USART1_DMA_Init &rArr; USART1_RX_DMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[37]"></a>USART1_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>USART1_SendChar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS103_FLY_Explore
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS103_R_Explore
</UL>

<P><STRONG><a name="[15e]"></a>USART3_DMA_Init</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART3_DMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Init
</UL>

<P><STRONG><a name="[bf]"></a>USART3_Init</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = USART3_Init &rArr; USART3_DMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[39]"></a>USART3_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USART3_IRQHandler &rArr; VISION_ReadData &rArr; Verify_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_ReadData
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>USART3_SendChar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, uart3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS103_FR_Explore
</UL>

<P><STRONG><a name="[171]"></a>inVSqrt</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[15f]"></a>Set_gyro</STRONG> (Thumb, 94 bytes, Stack size 64 bytes, bmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Set_gyro &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_error_codes_print_result
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
</UL>

<P><STRONG><a name="[164]"></a>Set_accel</STRONG> (Thumb, 90 bytes, Stack size 64 bytes, bmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Set_accel &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_error_codes_print_result
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
</UL>

<P><STRONG><a name="[165]"></a>BMI_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, bmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = BMI_Init &rArr; Set_accel &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_interface_selection
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_error_codes_print_result
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_accel
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gyro
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
</UL>

<P><STRONG><a name="[169]"></a>BMI_Get_RawData</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, bmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BMI_Get_RawData &rArr; MPU_Read_all &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_all
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_get_angle_to_use
</UL>

<P><STRONG><a name="[16b]"></a>BMI_Get_AUX</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, bmi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[16c]"></a>BMI_Get_GRO</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, bmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BMI_Get_GRO &rArr; MPU_Read_Byte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Static_Error_Calculate
</UL>

<P><STRONG><a name="[16d]"></a>BMI_Get_ACC</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, bmi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[5d8]"></a>Calm_BMI_Kp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bmi.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>BMI_Get_EulerAngle</STRONG> (Thumb, 2106 bytes, Stack size 72 bytes, bmi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = BMI_Get_EulerAngle &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inVSqrt
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_dps
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lsb_to_mps2
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_get_angle_to_use
</UL>

<P><STRONG><a name="[177]"></a>bmi2_get_regs</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_gyro_offset_comp_axes
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_gyro_offset_comp_axes
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_gyro_offset_comp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_gyro_user_gain
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_feat_int
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_ois_interface
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_fifo_length
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_fifo_down_sample
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_down_sample
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_fifo_filter_data
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_filter_data
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_fifo_wm
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_fifo_self_wake_up
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_self_wake_up
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_fifo_data
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_fifo_config
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_config
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_int_status
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_int_pin_config
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_int_pin_config
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_adv_power_save
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_internal_status
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test_completed
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rdy_for_dl
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_st_running
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_running
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_gyro_config
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_gyro_xyz
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_gyro_config
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_accel_foc_config
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_offset_comp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_accel_foc_config
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_gyro_gain
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_self_test_amp
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_self_test_enable
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_acc_self_test_sign
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_accel_xyz
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_aux_data
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_sensor_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_sensor_data
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_aux_data_mode
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_config
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_config
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_interface
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_interface_config
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_cfg
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_error_status
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_interface
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_load
</UL>

<P><STRONG><a name="[17b]"></a>bmi2_get_internal_status</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bmi2_get_internal_status &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
</UL>

<P><STRONG><a name="[17c]"></a>bmi2_set_regs</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bmi2_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_data_int
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_nvm_prog
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_abort_crt_gyro_st
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_act_recg_sett
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_gyro_offset_comp_axes
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_gyro_offset_comp
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_feat_int
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_sync_commands
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_ois_interface
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_down_sample
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_filter_data
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_wm
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_self_wake_up
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_command_register
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_config
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_int_pin_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvm_prep_prog
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_bmi2
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_self_test
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_crt_download
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_st_running
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_foc_config
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_gyro_config
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_foc_config
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_accel_offset
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_offset_comp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_accel_foc_config
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_gyro_gain
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_remap_axes
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_self_test_amp
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_self_test_enable
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_acc_self_test_sign
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_aux_data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if_aux_not_busy
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_maxburst_len
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_interface
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt_config
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake_config
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detect_config
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up_config
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orient_config
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g_config
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g_config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat_config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_w_config
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh_config
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det_config
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detector
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_single_tap
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_double_tap
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_triple_tap
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orientation
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture_wh
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_act_recog
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_accel_self_test
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_low_pass_filter
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_file
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_load
</UL>

<P><STRONG><a name="[17d]"></a>bmi2_set_adv_power_save</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = bmi2_set_adv_power_save &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_nvm_prog
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_abort_crt_gyro_st
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_act_recg_sett
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_act_recg_sett
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_aux_interleaved
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_aux_man_mode
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_aux_man_mode
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_foc_config
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_gyro_config
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_foc_config
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_accel_foc_config
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_gain_upd_status
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_remap_axes
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remap_axes
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxburst_len
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_maxburst_len
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_config_file
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
</UL>

<P><STRONG><a name="[181]"></a>bmi2_write_config_file</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = bmi2_write_config_file &rArr; write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_internal_status
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
</UL>

<P><STRONG><a name="[182]"></a>bmi2_soft_reset</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bmi2_soft_reset &rArr; bmi2_write_config_file &rArr; write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_nvm_prog
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_accel_self_test
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
</UL>

<P><STRONG><a name="[183]"></a>bmi2_sec_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = bmi2_sec_init &rArr; bmi2_soft_reset &rArr; bmi2_write_config_file &rArr; write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
</UL>

<P><STRONG><a name="[184]"></a>bmi2_get_feat_config</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_act_recg_sett
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_act_recg_sett
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvm_prep_prog
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_bmi2
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_self_test
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_gain_upd_status
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_remap_axes
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remap_axes
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxburst_len
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_maxburst_len
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_counter_output
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_activity_output
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_orient_output
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_g_output
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvm_error_status
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vfrm_error_status
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_status
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_self_test_status
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ois_output
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sig_motion_config
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_any_motion_config
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_motion_config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_count_params_config
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_config
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_config
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tilt_config
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_up_hold_to_wake_config
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glance_detect_config
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wake_up_config
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_orient_config
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_g_config
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_g_config
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flat_config
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ext_sens_sync_config
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_config
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_config
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_w_config
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_wh_config
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_primary_ois_config
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_fall_det_config
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt_config
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake_config
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detect_config
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up_config
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orient_config
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g_config
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g_config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat_config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_w_config
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh_config
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det_config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detector
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_single_tap
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_double_tap
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_triple_tap
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orientation
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture_wh
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_act_recog
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_accel_self_test
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_low_pass_filter
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_config_file
</UL>

<P><STRONG><a name="[186]"></a>bmi2_extract_input_feat_config</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bmi2_extract_input_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_act_recg_sett
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_act_recg_sett
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvm_prep_prog
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_bmi2
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_self_test
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_gain_upd_status
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_remap_axes
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remap_axes
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxburst_len
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_maxburst_len
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sig_motion_config
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_any_motion_config
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_motion_config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_count_params_config
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_config
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_config
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tilt_config
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_up_hold_to_wake_config
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glance_detect_config
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wake_up_config
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_orient_config
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_g_config
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_g_config
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flat_config
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ext_sens_sync_config
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_config
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_config
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_w_config
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_wh_config
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_primary_ois_config
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_fall_det_config
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt_config
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake_config
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detect_config
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up_config
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orient_config
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g_config
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g_config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat_config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_w_config
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh_config
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det_config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detector
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_single_tap
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_double_tap
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_triple_tap
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orientation
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture_wh
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_act_recog
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_accel_self_test
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_low_pass_filter
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_config_file
</UL>

<P><STRONG><a name="[187]"></a>bmi2_get_config_file_version</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_config_file
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[168]"></a>bmi2_sensor_enable</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = bmi2_sensor_enable &rArr; sensor_enable &rArr; set_sig_motion &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_sensor
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_update_gyro_user_gain
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_prepare_setup
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_foc_config
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_foc_config
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_foc_position
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_self_test_config
</UL>

<P><STRONG><a name="[1a7]"></a>bmi2_sensor_disable</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_sensor
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_update_gyro_user_gain
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_prepare_setup
</UL>

<P><STRONG><a name="[1be]"></a>bmi2_get_status</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bmi2_get_status &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_nvm_prog
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_gyro_foc
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_accel_foc
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_average_of_sensor_data
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if_aux_not_busy
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
</UL>

<P><STRONG><a name="[163]"></a>bmi2_set_sensor_config</STRONG> (Thumb, 766 bytes, Stack size 32 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = bmi2_set_sensor_config &rArr; set_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion_config
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion_config
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion_config
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_count_params_config
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_config
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain_config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt_config
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake_config
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detect_config
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up_config
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orient_config
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g_config
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g_config
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat_config
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync_config
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_config
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_config
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gest_w_config
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh_config
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det_config
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_accel
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gyro
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_update_gyro_user_gain
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_self_test_config
</UL>

<P><STRONG><a name="[160]"></a>bmi2_get_sensor_config</STRONG> (Thumb, 798 bytes, Stack size 32 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_config
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_config
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_config
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sig_motion_config
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_any_motion_config
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_no_motion_config
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_count_params_config
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_config
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_config
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tilt_config
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_up_hold_to_wake_config
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glance_detect_config
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wake_up_config
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_orient_config
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_g_config
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_low_g_config
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_flat_config
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ext_sens_sync_config
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_config
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_config
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_w_config
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_wear_wake_up_wh_config
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_primary_ois_config
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_free_fall_det_config
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_accel
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gyro
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_update_gyro_user_gain
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_foc_accel_axis
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_self_test_config
</UL>

<P><STRONG><a name="[1f7]"></a>bmi2_get_sensor_data</STRONG> (Thumb, 434 bytes, Stack size 32 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = bmi2_get_sensor_data &rArr; get_ois_output &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_sensor_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_sensor_data
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_aux_data_mode
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_counter_output
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_activity_output
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_orient_output
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_g_output
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvm_error_status
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vfrm_error_status
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_status
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_self_test_status
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ois_output
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_gyro_cross_sense
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_average_of_sensor_data
</UL>

<P><STRONG><a name="[1f8]"></a>bmi2_get_adv_power_save</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_gyro_config
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_accel_foc_config
</UL>

<P><STRONG><a name="[1f9]"></a>bmi2_set_int_pin_config</STRONG> (Thumb, 218 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[1fa]"></a>bmi2_get_int_pin_config</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[1fb]"></a>bmi2_get_int_status</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[1fe]"></a>bmi2_set_fifo_config</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxburst_len
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_maxburst_len
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_prepare_setup
</UL>

<P><STRONG><a name="[1ff]"></a>bmi2_get_fifo_config</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[200]"></a>bmi2_read_fifo_data</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_fifo_frame_structure
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[20a]"></a>bmi2_extract_accel</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_fifo_accel_len
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_empty_fifo
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_accel_header_mode
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_accel_frame
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[210]"></a>bmi2_extract_gyro</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_fifo_gyro_len
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_gyro_header_mode
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_gyro_frame
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_empty_fifo
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[216]"></a>bmi2_extract_aux</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_fifo_aux_len
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_aux_header_mode
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_aux_frame
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_empty_fifo
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[218]"></a>bmi2_set_command_register</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_update_gyro_user_gain
</UL>

<P><STRONG><a name="[219]"></a>bmi2_set_fifo_self_wake_up</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[21a]"></a>bmi2_get_fifo_self_wake_up</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[21b]"></a>bmi2_set_fifo_wm</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[21c]"></a>bmi2_get_fifo_wm</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[21d]"></a>bmi2_set_fifo_filter_data</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[21e]"></a>bmi2_get_fifo_filter_data</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[21f]"></a>bmi2_set_fifo_down_sample</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[220]"></a>bmi2_get_fifo_down_sample</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[221]"></a>bmi2_get_fifo_length</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[224]"></a>bmi2_read_aux_man_mode</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_read_len
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_aux_data
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[227]"></a>bmi2_write_aux_man_mode</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_aux_data
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[228]"></a>bmi2_write_aux_interleaved</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_aux_data
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[229]"></a>bmi2_set_ois_interface</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[22a]"></a>bmi2_write_sync_commands</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[233]"></a>bmi2_perform_accel_self_test</STRONG> (Thumb, 214 bytes, Stack size 72 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_self_test_config
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test_config
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_accel_xyz
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_lsb_g
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_self_test
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[235]"></a>bmi2_map_feat_int</STRONG> (Thumb, 372 bytes, Stack size 40 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_feat_int
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[162]"></a>bmi2_map_data_int</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = bmi2_map_data_int &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_accel
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gyro
</UL>

<P><STRONG><a name="[238]"></a>bmi2_get_remap_axes</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remap_axes
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[23a]"></a>bmi2_set_remap_axes</STRONG> (Thumb, 402 bytes, Stack size 40 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_remap_axes
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[23d]"></a>bmi2_update_gyro_user_gain</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_command_register
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_disable
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_user_gain_upd_status
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_gyro_gain
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[23e]"></a>bmi2_read_gyro_user_gain</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[23f]"></a>bmi2_set_gyro_offset_comp</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_gyro_foc
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_foc_config
</UL>

<P><STRONG><a name="[240]"></a>bmi2_read_gyro_offset_comp_axes</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[241]"></a>bmi2_write_gyro_offset_comp_axes</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_gyro_foc
</UL>

<P><STRONG><a name="[243]"></a>bmi2_get_act_recog_output</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_if_s4s_frame
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_act_recog_output
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_next_frame
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[245]"></a>bmi2_get_gyro_cross_sense</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = bmi2_get_gyro_cross_sense &rArr; bmi2_get_sensor_data &rArr; get_ois_output &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
</UL>

<P><STRONG><a name="[256]"></a>bmi2_perform_accel_foc</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_accel_foc_config
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_foc_config
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_accel_foc
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_accel_foc_config
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_foc_position
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[25b]"></a>bmi2_perform_gyro_foc</STRONG> (Thumb, 358 bytes, Stack size 1600 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_gyro_offset_comp_axes
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_gyro_offset_comp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_gyro_config
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_foc_config
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_gyro_xyz
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;saturate_gyro_data
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_gyro_offset
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_gyro_config
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_foc_position
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[25e]"></a>bmi2_get_act_recg_sett</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[25f]"></a>bmi2_set_act_recg_sett</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>

<P><STRONG><a name="[26d]"></a>bmi2_do_gyro_st</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
</UL>

<P><STRONG><a name="[26e]"></a>bmi2_do_crt</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
</UL>

<P><STRONG><a name="[270]"></a>bmi2_abort_crt_gyro_st</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_bmi2
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_gyro_st_update_result
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_st_running
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_running
</UL>

<P><STRONG><a name="[271]"></a>bmi2_nvm_prog</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_nvm_prep_prog
</UL>

<P><STRONG><a name="[272]"></a>bmi2_user_i2c_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bmi2_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bmi2_user_i2c_init &rArr; IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_interface_selection
</UL>

<P><STRONG><a name="[276]"></a>bmi2_user_spi_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bmi2_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_interface_selection
</UL>

<P><STRONG><a name="[273]"></a>user_delay_us</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, bmi2_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = user_delay_us &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmi2_common.o(.text)
</UL>
<P><STRONG><a name="[16a]"></a>MPU_Read_all</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, bmi2_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MPU_Read_all &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_RawData
</UL>

<P><STRONG><a name="[5d9]"></a>user_delay_ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bmi2_common.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>user_i2c_reg_write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, bmi2_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = user_i2c_reg_write &rArr; IIC_Send_Byte &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmi2_common.o(.text)
</UL>
<P><STRONG><a name="[275]"></a>user_i2c_reg_read</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, bmi2_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = user_i2c_reg_read &rArr; MPU_Read_Byte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmi2_common.o(.text)
</UL>
<P><STRONG><a name="[278]"></a>user_spi_reg_write</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bmi2_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_spi_reg_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmi2_common.o(.text)
</UL>
<P><STRONG><a name="[277]"></a>user_spi_reg_read</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bmi2_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = user_spi_reg_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bmi2_common.o(.text)
</UL>
<P><STRONG><a name="[166]"></a>bmi2_interface_selection</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bmi2_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bmi2_interface_selection &rArr; bmi2_user_i2c_init &rArr; IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_user_spi_init
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_user_i2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
</UL>

<P><STRONG><a name="[161]"></a>bmi2_error_codes_print_result</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bmi2_common.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_accel
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_gyro
</UL>

<P><STRONG><a name="[167]"></a>bmi270_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, bmi270.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = bmi270_init &rArr; bmi2_get_gyro_cross_sense &rArr; bmi2_get_sensor_data &rArr; get_ois_output &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_gyro_cross_sense
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
</UL>

<P><STRONG><a name="[27a]"></a>VISION_SendData</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VISION_SendData &rArr; Append_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_DMA_SentData
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Reset
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_AIM_Ctrl
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_BUFF_Ctrl
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMALL_BUFF_Ctrl
</UL>

<P><STRONG><a name="[284]"></a>Report_IF_anti_GYRO</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Reset
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAimYaw_Ctrl
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_AIM_Ctrl
</UL>

<P><STRONG><a name="[27c]"></a>Get_RC_ctrlColor</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_RC_ctrlColor
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_S2
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_MyColor
</UL>

<P><STRONG><a name="[27f]"></a>Report_IF_ShootBase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_MyColor
</UL>

<P><STRONG><a name="[27e]"></a>Judge_MyColor</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Judge_MyColor &rArr; Get_RC_ctrlColor
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_ShootBase
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RC_ctrlColor
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Reset
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_AIM_Ctrl
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_BUFF_Ctrl
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMALL_BUFF_Ctrl
</UL>

<P><STRONG><a name="[d8]"></a>Vision_Reset</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Vision_Reset &rArr; VISION_SendData &rArr; Append_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_YawAngle
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_Shoot_Speed
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_PitAngle
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Robot_ID
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_MyColor
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_anti_GYRO
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_Ctrl
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_TASK
</UL>

<P><STRONG><a name="[286]"></a>Report_IF_CHANGE_PLAN_BUFF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_BUFF_Ctrl
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMALL_BUFF_Ctrl
</UL>

<P><STRONG><a name="[285]"></a>SMALL_BUFF_Ctrl</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SMALL_BUFF_Ctrl &rArr; VISION_SendData &rArr; Append_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_Shoot_Speed
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Robot_ID
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_CHANGE_PLAN_BUFF
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_MyColor
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_Ctrl
</UL>

<P><STRONG><a name="[287]"></a>BIG_BUFF_Ctrl</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BIG_BUFF_Ctrl &rArr; VISION_SendData &rArr; Append_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_Shoot_Speed
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Robot_ID
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_CHANGE_PLAN_BUFF
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_MyColor
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_Ctrl
</UL>

<P><STRONG><a name="[288]"></a>AUTO_AIM_Ctrl</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = AUTO_AIM_Ctrl &rArr; VISION_SendData &rArr; Append_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_prev_imu_yaw_angle
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_prev_imu_pit_angle
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_Shoot_Speed
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Robot_ID
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_MyColor
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_anti_GYRO
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_Ctrl
</UL>

<P><STRONG><a name="[d7]"></a>VISION_Ctrl</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = VISION_Ctrl &rArr; Vision_Reset &rArr; VISION_SendData &rArr; Append_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Reset
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_AIM_Ctrl
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_BUFF_Ctrl
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMALL_BUFF_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_TASK
</UL>

<P><STRONG><a name="[d6]"></a>VISION_GET_Info</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_TASK
</UL>

<P><STRONG><a name="[352]"></a>Set_IF_ShootSentry</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_G
</UL>

<P><STRONG><a name="[353]"></a>Reset_IF_ShootSentry</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_G
</UL>

<P><STRONG><a name="[3a3]"></a>Report_IF_ShoorSentry</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_PIT
</UL>

<P><STRONG><a name="[34f]"></a>Set_IF_BigBuff</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Z
</UL>

<P><STRONG><a name="[34c]"></a>Set_IF_SmallBuff</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_X
</UL>

<P><STRONG><a name="[34d]"></a>Reset_IF_BuffMode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Z
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_X
</UL>

<P><STRONG><a name="[335]"></a>Set_IF_CHANGE_PLAN_BUFF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_R
</UL>

<P><STRONG><a name="[333]"></a>Reset_IF_CHANGE_PLAN_BUFF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_R
</UL>

<P><STRONG><a name="[334]"></a>Set_IF_AutoAim</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_R
</UL>

<P><STRONG><a name="[2a4]"></a>VISION_GetFlagStatus</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_AutoShoot
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAimPit_Ctrl
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAimYaw_Ctrl
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffAimPit_Ctrl
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffAimYaw_Ctrl
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_IF_BuffArmorSwitch
</UL>

<P><STRONG><a name="[5da]"></a>Get_Aim_distance</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vision.o(.text), UNUSED)

<P><STRONG><a name="[347]"></a>Set_anti_GYRO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_G
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_V
</UL>

<P><STRONG><a name="[346]"></a>Reset_anti_GYRO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_G
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_V
</UL>

<P><STRONG><a name="[5db]"></a>Set_ShootBase</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vision.o(.text), UNUSED)

<P><STRONG><a name="[5dc]"></a>Reset_ShootBase</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vision.o(.text), UNUSED)

<P><STRONG><a name="[28b]"></a>Vision_Handler</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Vision_Handler &rArr; AutoAim_ON &rArr; Predict_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_G
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Z
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_X
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_R
</UL>

<P><STRONG><a name="[28e]"></a>Vision_Cmd_Reset</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_OFF
</UL>

<P><STRONG><a name="[28d]"></a>Vision_OFF</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Vision_OFF &rArr; AutoAim_OFF &rArr; Predict_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffAim_OFF
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_OFF
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Cmd_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_turnOFF
</UL>

<P><STRONG><a name="[291]"></a>YawVision_nolook</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = YawVision_nolook &rArr; Mouse_X_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_X_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAimYaw_Ctrl
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffAimYaw_Ctrl
</UL>

<P><STRONG><a name="[293]"></a>PitVision_nolook</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PitVision_nolook &rArr; Mouse_Y_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Y_Speed
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAimPit_Ctrl
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffAimPit_Ctrl
</UL>

<P><STRONG><a name="[2b1]"></a>YAW_GetAutoAimErr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
</UL>

<P><STRONG><a name="[2b3]"></a>PIT_GetAutoAimErr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
</UL>

<P><STRONG><a name="[5dd]"></a>Get_VisionDistance</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, vision.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>YAW_GetBuffCoordinate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffAimYaw_Ctrl
</UL>

<P><STRONG><a name="[2a7]"></a>PIT_GetBuffCoordinate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffAimPit_Ctrl
</UL>

<P><STRONG><a name="[295]"></a>cnt</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_ReadData
</UL>

<P><STRONG><a name="[2b5]"></a>Get_FrameTime</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AccelData
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OmigaData
</UL>

<P><STRONG><a name="[297]"></a>VisionTrigger_Init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = VisionTrigger_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Init
</UL>

<P><STRONG><a name="[b4]"></a>Vision_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Vision_Init &rArr; VisionTrigger_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VisionTrigger_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_Init
</UL>

<P><STRONG><a name="[155]"></a>VISION_ReadData</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = VISION_ReadData &rArr; Verify_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_IF_BuffArmorSwitch
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cnt
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[29a]"></a>Trigger_ON</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Trigger_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_5ms
</UL>

<P><STRONG><a name="[29b]"></a>Trigger_OFF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Trigger_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_5ms
</UL>

<P><STRONG><a name="[29c]"></a>Report_TriggerSignal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_5ms
</UL>

<P><STRONG><a name="[29e]"></a>TriggerSignal_YES</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_5ms
</UL>

<P><STRONG><a name="[29d]"></a>TriggerSignal_NO</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, vision.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_5ms
</UL>

<P><STRONG><a name="[dc]"></a>Trigger</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, vision.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Trigger &rArr; Trigger_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSignal_NO
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSignal_YES
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_TriggerSignal
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_OFF
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_TRIGGER_TASK
</UL>

<P><STRONG><a name="[29f]"></a>Trigger_5ms</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, vision.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSignal_NO
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TriggerSignal_YES
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_TriggerSignal
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_OFF
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Trigger_ON
</UL>

<P><STRONG><a name="[2a1]"></a>Buff_AutoShoot_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffAim_ON
</UL>

<P><STRONG><a name="[2a2]"></a>Buff_AutoShoot_OFF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffAim_OFF
</UL>

<P><STRONG><a name="[2a9]"></a>Report_IF_Buff_AutoShoot_ON</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, buff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buff_AutoShoot
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_D
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_A
</UL>

<P><STRONG><a name="[2a0]"></a>BuffAim_ON</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, buff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BuffAim_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buff_AutoShoot_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_V
</UL>

<P><STRONG><a name="[290]"></a>BuffAim_OFF</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, buff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BuffAim_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buff_AutoShoot_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_OFF
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_V
</UL>

<P><STRONG><a name="[2a3]"></a>BuffAimYaw_Ctrl</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, buff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BuffAimYaw_Ctrl &rArr; YawVision_nolook &rArr; Mouse_X_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_GetBuffCoordinate
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YawVision_nolook
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_YAW
</UL>

<P><STRONG><a name="[2a6]"></a>BuffAimPit_Ctrl</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, buff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BuffAimPit_Ctrl &rArr; PitVision_nolook &rArr; Mouse_Y_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetBuffCoordinate
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PitVision_nolook
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_PIT
</UL>

<P><STRONG><a name="[36f]"></a>ADD_AutoShoot_Tim</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, buff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_W
</UL>

<P><STRONG><a name="[36c]"></a>CUT_AutoShoot_Tim</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, buff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_S
</UL>

<P><STRONG><a name="[299]"></a>Check_IF_BuffArmorSwitch</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, buff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_IF_BuffArmorSwitch
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_ReadData
</UL>

<P><STRONG><a name="[2ab]"></a>Buff_AutoShoot_CntReset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, buff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleFireRequest
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buff_AutoShoot
</UL>

<P><STRONG><a name="[2a8]"></a>Buff_AutoShoot</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, buff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Buff_AutoShoot &rArr; SingleFireRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleFireRequest
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buff_AutoShoot_CntReset
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_Buff_AutoShoot_ON
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_KET_Ctrl
</UL>

<P><STRONG><a name="[366]"></a>YAW_KeyFix_UP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, buff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_A
</UL>

<P><STRONG><a name="[369]"></a>YAW_KeyFix_DOWN</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, buff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_D
</UL>

<P><STRONG><a name="[5de]"></a>PIT_KeyFix_UP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, buff.o(.text), UNUSED)

<P><STRONG><a name="[5df]"></a>PIT_KeyFix_DOWN</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, buff.o(.text), UNUSED)

<P><STRONG><a name="[5e0]"></a>YAW_KeyFix_UP_CON</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, buff.o(.text), UNUSED)

<P><STRONG><a name="[5e1]"></a>YAW_KeyFix_DOWN_CON</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, buff.o(.text), UNUSED)

<P><STRONG><a name="[5e2]"></a>PIT_KeyFix_UP_CON</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, buff.o(.text), UNUSED)

<P><STRONG><a name="[5e3]"></a>PIT_KeyFix_DOWN_CON</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, buff.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>AutoAimInit</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, auto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_Init
</UL>

<P><STRONG><a name="[2ae]"></a>VErrSlope_Reset</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, auto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_ON
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_OFF
</UL>

<P><STRONG><a name="[2ad]"></a>SlopeData_Reset</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, auto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Predict_Reset
</UL>

<P><STRONG><a name="[2ac]"></a>Predict_Reset</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, auto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Predict_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlopeData_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAimPit_Ctrl
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAimYaw_Ctrl
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_ON
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_OFF
</UL>

<P><STRONG><a name="[28c]"></a>AutoAim_ON</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, auto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = AutoAim_ON &rArr; Predict_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetMechAngle
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Predict_Reset
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VErrSlope_Reset
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_prev_imu_yaw_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Handler
</UL>

<P><STRONG><a name="[28f]"></a>AutoAim_OFF</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, auto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AutoAim_OFF &rArr; Predict_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Predict_Reset
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VErrSlope_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_OFF
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_G
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_R
</UL>

<P><STRONG><a name="[5e4]"></a>Report_IF_AutoAim_ON</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, auto.o(.text), UNUSED)

<P><STRONG><a name="[2b0]"></a>GetAngle</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, auto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GetAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slope
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetMechAngle
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_prev_imu_yaw_angle
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetAutoAimErr
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_GetAutoAimErr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_Algorithm
</UL>

<P><STRONG><a name="[2ba]"></a>Get_SlopeTarget</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, auto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_Algorithm
</UL>

<P><STRONG><a name="[2b4]"></a>Get_OmigaData</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, auto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_OmigaData
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FrameTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_Algorithm
</UL>

<P><STRONG><a name="[2b6]"></a>Get_AccelData</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, auto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_AccelData
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_FrameTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_Algorithm
</UL>

<P><STRONG><a name="[2b7]"></a>PRE_switch</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, auto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PRE_switch &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_DUM_Normal
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Shoot_SpeedLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAimYaw_Ctrl
</UL>

<P><STRONG><a name="[2b9]"></a>AutoAim_Algorithm</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, auto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AutoAim_Algorithm &rArr; Get_AccelData
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_AccelData
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_OmigaData
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SlopeTarget
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAimPit_Ctrl
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAimYaw_Ctrl
</UL>

<P><STRONG><a name="[2c2]"></a>Report_IF_START_yawPREDICT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, auto.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_AutoShoot
</UL>

<P><STRONG><a name="[5e5]"></a>Report_IF_START_pitPREDICT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, auto.o(.text), UNUSED)

<P><STRONG><a name="[2bc]"></a>AutoAimYaw_Ctrl</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, auto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AutoAimYaw_Ctrl &rArr; AutoAim_Algorithm &rArr; Get_AccelData
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_Algorithm
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRE_switch
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Predict_Reset
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YawVision_nolook
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_GetFlagStatus
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_anti_GYRO
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_YAW
</UL>

<P><STRONG><a name="[2be]"></a>Report_PIT_AUTO_NUM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, auto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAimPit_Ctrl
</UL>

<P><STRONG><a name="[2bd]"></a>AutoAimPit_Ctrl</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, auto.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AutoAimPit_Ctrl &rArr; AutoAim_Algorithm &rArr; Get_AccelData
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_PIT_AUTO_NUM
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_Algorithm
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Predict_Reset
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PitVision_nolook
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_PIT
</UL>

<P><STRONG><a name="[2bf]"></a>AutoShoot_Reset</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, auto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_AutoShoot
</UL>

<P><STRONG><a name="[2c1]"></a>Yaw_AutoShoot</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, auto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire_ON
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoShoot_Reset
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_START_yawPREDICT
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleFireRequest
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_GetFlagStatus
</UL>

<P><STRONG><a name="[2dd]"></a>Report_IF_Auto_InitOver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, auto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_ctrl_cmd
</UL>

<P><STRONG><a name="[2c4]"></a>AutoAim_Trigger</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, auto.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_GetGyroAngle
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_GetMechAngle
</UL>

<P><STRONG><a name="[362]"></a>PIT_AUTO_ADD</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, auto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Q
</UL>

<P><STRONG><a name="[35d]"></a>PIT_AUTO_DEC</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, auto.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_E
</UL>

<P><STRONG><a name="[b7]"></a>CRC_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CRC_init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[2c6]"></a>Get_CRC8_Check_Sum</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
</UL>

<P><STRONG><a name="[f5]"></a>Verify_CRC8_Check_Sum</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Verify_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_ReadData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZIGBEE_ReceiveData
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judege_read_data
</UL>

<P><STRONG><a name="[f2]"></a>Append_CRC8_Check_Sum</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Append_CRC8_Check_Sum &rArr; Get_CRC8_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC8_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZIGBEE_SendData
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshortstem_aim_4
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshort_aim_3
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshort_aim_2
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowlong_aim_
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_high_aim_
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_supercapacitor_update
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_Init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_Info_update
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_SendData
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_aim_line
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_bullet_int_update
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_gimbal_angle_update
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_aim_update
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_delete_update
</UL>

<P><STRONG><a name="[2c7]"></a>Get_CRC16_Check_Sum</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
</UL>

<P><STRONG><a name="[298]"></a>Verify_CRC16_Check_Sum</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Verify_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_ReadData
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judege_read_data
</UL>

<P><STRONG><a name="[27b]"></a>Append_CRC16_Check_Sum</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, crc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Append_CRC16_Check_Sum &rArr; Get_CRC16_Check_Sum
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CRC16_Check_Sum
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshortstem_aim_4
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshort_aim_3
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshort_aim_2
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowlong_aim_
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_high_aim_
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_supercapacitor_update
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_Init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_Info_update
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_SendData
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_aim_line
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_bullet_int_update
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_gimbal_angle_update
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_aim_update
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_delete_update
</UL>

<P><STRONG><a name="[2c8]"></a>KalmanCreate</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, kalman.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Init
</UL>

<P><STRONG><a name="[2bb]"></a>KalmanFilter</STRONG> (Thumb, 134 bytes, Stack size 0 bytes, kalman.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_Algorithm
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Y_Speed
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_X_Speed
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Get_Z_Speed
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Get_AngleErr
</UL>

<P><STRONG><a name="[b2]"></a>Kalman_Init</STRONG> (Thumb, 478 bytes, Stack size 4 bytes, kalman.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Kalman_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[2e8]"></a>Report_IF_DataUpdate</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, masters_rtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Sent
</UL>

<P><STRONG><a name="[2e4]"></a>Referee_Update</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, masters_rtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Set_IMU_DataUpdate
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SuperCap_cmd_Update
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_UI_Data_Update
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judege_read_data
</UL>

<P><STRONG><a name="[2c9]"></a>Get_GameRobotStat_Info</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, masters_rtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_GameRobotStat_Info
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REF_Report_robot_ID
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REF_Report_Shoot_SpeedLimit
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REF_Report_Shoot_CoolingLimit
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REF_Report_IF_shooter_output
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REF_Report_CHAS_MaxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Sent
</UL>

<P><STRONG><a name="[2cf]"></a>Get_PowerHeatData_Info</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, masters_rtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_PowerHeatData_Info
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REF_Report_Shooter_Heat
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REF_Report_CHAS_PowerBuffer
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REF_Report_CHAS_Power
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Sent
</UL>

<P><STRONG><a name="[2d3]"></a>Get_IMU_Info</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, masters_rtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Get_IMU_Info &rArr; Park_Judge_R
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Park_Judge_R
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Park_Judge_Z
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Park_Judge_F
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_Fly
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_YawSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Sent
</UL>

<P><STRONG><a name="[2d9]"></a>DUM_Report_CHAS_MaxPower</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, masters_rtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SuperCap_Info
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_Speed
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySlope_LR
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySlope_FB
</UL>

<P><STRONG><a name="[2d8]"></a>DUM_Report_PowerBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masters_rtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SuperCap_Info
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_limit
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_PowerLimit
</UL>

<P><STRONG><a name="[2d7]"></a>DUM_Report_CHAS_Power</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, masters_rtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SuperCap_Info
</UL>

<P><STRONG><a name="[2d5]"></a>Get_SuperCap_Info</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, masters_rtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_SuperCap_Info
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_SuperCap_cmd
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_CHAS_Power
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_PowerBuffer
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_CHAS_MaxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Sent
</UL>

<P><STRONG><a name="[2da]"></a>Get_ShootSpeed_Info</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, masters_rtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_ShootSpeed_Info
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;REF_Report_RealShootSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Sent
</UL>

<P><STRONG><a name="[2dc]"></a>Get_UI_ctrl_cmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, masters_rtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Get_UI_ctrl_cmd &rArr; Report_IF_BulletWarning &rArr; Judge_IF_BulletWarning
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_SinBlocks
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_ShootHeatLimit
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_CLIP_OPEN
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_BulletWarning
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN_Report
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_Auto_InitOver
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Sent
</UL>

<P><STRONG><a name="[2e3]"></a>Set_UI_Data_Update</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, masters_rtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Set_UI_Data_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Data_Update
</UL>

<P><STRONG><a name="[2e5]"></a>UI_Data_Update</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, masters_rtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UI_Data_Update &rArr; Set_UI_Data_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_UI_Data_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Sent
</UL>

<P><STRONG><a name="[2e6]"></a>Set_SuperCap_cmd_Update</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, masters_rtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Set_SuperCap_cmd_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_Update
</UL>

<P><STRONG><a name="[2e7]"></a>SuperCap_Update</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, masters_rtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SuperCap_Update &rArr; Set_SuperCap_cmd_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_SuperCap_cmd_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_Sent
</UL>

<P><STRONG><a name="[df]"></a>Master_Sent</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, masters_rtx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Master_Sent &rArr; CAN1_DUM_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_DUM_Send
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_Update
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Data_Update
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_ctrl_cmd
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ShootSpeed_Info
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SuperCap_Info
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IMU_Info
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PowerHeatData_Info
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GameRobotStat_Info
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_DataUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASTERLINK_TASK
</UL>

<P><STRONG><a name="[2e9]"></a>DUM_Set_IMU_DataUpdate</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, masters_rtx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Update
</UL>

<P><STRONG><a name="[126]"></a>DUM_Data_Receive</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, masters_rtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataUpdate
</UL>

<P><STRONG><a name="[2b8]"></a>DUM_Report_Shoot_SpeedLimit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masters_rtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRE_switch
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_GetReferInfo
</UL>

<P><STRONG><a name="[280]"></a>DUM_Report_Robot_ID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masters_rtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Reset
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_AIM_Ctrl
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_BUFF_Ctrl
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMALL_BUFF_Ctrl
</UL>

<P><STRONG><a name="[42f]"></a>DUM_Report_Shoot_Heat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masters_rtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_Change_HeatLimit
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_12
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_20
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_SingleHeat_ShootAllow
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_Heat_ShootAllow
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_15
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_10
</UL>

<P><STRONG><a name="[430]"></a>DUM_Report_CoolingLimit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masters_rtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_Change_HeatLimit
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_12
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_20
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_SingleHeat_ShootAllow
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_Heat_ShootAllow
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_15
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_10
</UL>

<P><STRONG><a name="[3db]"></a>DUM_Report_CHAS_IMU_YAW_Speed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, masters_rtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Get_Z_Speed
</UL>

<P><STRONG><a name="[41b]"></a>DUM_Report_IF_ArmorBooster_work</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, masters_rtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_SetInitNum
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_IF_ArmorBooster_Deinit
</UL>

<P><STRONG><a name="[414]"></a>DUM_Report_RealShootSpeed</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, masters_rtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_SpeedFIX
</UL>

<P><STRONG><a name="[415]"></a>DUM_Report_Shoot_NUM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, masters_rtx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_BulletWarning
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_SpeedFIX
</UL>

<P><STRONG><a name="[3f2]"></a>DUM_Report_IF_CarFly</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, masters_rtx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarFly_Over_React
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarFly_React
</UL>

<P><STRONG><a name="[10d]"></a>DUM_Report_Park_Fmove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masters_rtx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Park_Z_Speed
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Park_LR_Speed
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Park_FB_Speed
</UL>

<P><STRONG><a name="[10f]"></a>DUM_Report_Park_Rmove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masters_rtx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Park_LR_Speed
</UL>

<P><STRONG><a name="[111]"></a>DUM_Report_Park_Zmove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masters_rtx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Park_Z_Speed
</UL>

<P><STRONG><a name="[2f4]"></a>Report_SuperCap_Vremain</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, masters_rtx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DataUpdate
</UL>

<P><STRONG><a name="[2f0]"></a>Report_UI_User_cmd_SPIN</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masters_rtx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DataUpdate
</UL>

<P><STRONG><a name="[2ef]"></a>Report_UI_User_cmd_AUTO</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masters_rtx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DataUpdate
</UL>

<P><STRONG><a name="[2ed]"></a>Report_UI_User_cmd_CLIP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masters_rtx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DataUpdate
</UL>

<P><STRONG><a name="[2f1]"></a>Report_UI_User_cmd_SHOOTLIMIT</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masters_rtx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DataUpdate
</UL>

<P><STRONG><a name="[2f2]"></a>Report_UI_User_cmd_BlockMuch</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masters_rtx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DataUpdate
</UL>

<P><STRONG><a name="[2f3]"></a>Report_UI_User_cmd_BulletWarning</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, masters_rtx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DataUpdate
</UL>

<P><STRONG><a name="[2ee]"></a>ShootNum_Reset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, masters_rtx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DataUpdate
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Clip_State_Updata
</UL>

<P><STRONG><a name="[2ea]"></a>UI_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cusui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_REF_ONL
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startjudge_task
</UL>

<P><STRONG><a name="[2ec]"></a>UI_DataUpdate</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, cusui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootNum_Reset
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_UI_User_cmd_BulletWarning
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_UI_User_cmd_BlockMuch
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_UI_User_cmd_SHOOTLIMIT
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_UI_User_cmd_CLIP
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_UI_User_cmd_AUTO
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_UI_User_cmd_SPIN
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_SuperCap_Vremain
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startjudge_task
</UL>

<P><STRONG><a name="[e3]"></a>Startjudge_task</STRONG> (Thumb, 274 bytes, Stack size 8 bytes, cusui.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshortstem_aim_4
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshort_aim_3
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshort_aim_2
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowlong_aim_
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_high_aim_
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_supercapacitor_update
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_Init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_Info_update
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_DataUpdate
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSUI_TASK
</UL>

<P><STRONG><a name="[2fe]"></a>Determine_ID</STRONG> (Thumb, 464 bytes, Stack size 0 bytes, referee.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judege_read_data
</UL>

<P><STRONG><a name="[2fd]"></a>Judege_read_data</STRONG> (Thumb, 548 bytes, Stack size 24 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC8_Check_Sum
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Referee_Update
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Verify_CRC16_Check_Sum
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judege_read_data
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Determine_ID
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judege_read_data
</UL>

<P><STRONG><a name="[2ff]"></a>UART5_DMA_Init</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, referee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART5_DMA_Init &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_Init
</UL>

<P><STRONG><a name="[bc]"></a>UART5_Init</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, referee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = UART5_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[47]"></a>UART5_IRQHandler</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, referee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART5_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[300]"></a>UART5_SendChar</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshortstem_aim_4
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshort_aim_3
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshort_aim_2
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowlong_aim_
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_high_aim_
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_supercapacitor_update
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_Init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_Info_update
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_aim_line
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_bullet_int_update
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_gimbal_angle_update
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_aim_update
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_delete_update
</UL>

<P><STRONG><a name="[301]"></a>Judge_IF_Refer_Normal</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, referee.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Judge_IF_Refer_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_StateSyne
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_REF_ONL
</UL>

<P><STRONG><a name="[2eb]"></a>Judge_IF_REF_ONL</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_Refer_Normal
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
</UL>

<P><STRONG><a name="[2d0]"></a>REF_Report_CHAS_Power</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, referee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PowerHeatData_Info
</UL>

<P><STRONG><a name="[2d1]"></a>REF_Report_CHAS_PowerBuffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, referee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PowerHeatData_Info
</UL>

<P><STRONG><a name="[2d2]"></a>REF_Report_Shooter_Heat</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, referee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_PowerHeatData_Info
</UL>

<P><STRONG><a name="[2db]"></a>REF_Report_RealShootSpeed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, referee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_ShootSpeed_Info
</UL>

<P><STRONG><a name="[2cd]"></a>REF_Report_IF_shooter_output</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, referee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GameRobotStat_Info
</UL>

<P><STRONG><a name="[2cb]"></a>REF_Report_robot_ID</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, referee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GameRobotStat_Info
</UL>

<P><STRONG><a name="[2cc]"></a>REF_Report_Shoot_SpeedLimit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, referee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GameRobotStat_Info
</UL>

<P><STRONG><a name="[2ce]"></a>REF_Report_Shoot_CoolingLimit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, referee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GameRobotStat_Info
</UL>

<P><STRONG><a name="[5e6]"></a>REF_Report_Shoot_CoolingRate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, referee.o(.text), UNUSED)

<P><STRONG><a name="[2ca]"></a>REF_Report_CHAS_MaxPower</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, referee.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GameRobotStat_Info
</UL>

<P><STRONG><a name="[5e7]"></a>REF_Report_RFID_State</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, referee.o(.text), UNUSED)

<P><STRONG><a name="[302]"></a>Char_Graphic</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_char
</UL>

<P><STRONG><a name="[2f5]"></a>Client_graphic_Init</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_char
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_SendChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startjudge_task
</UL>

<P><STRONG><a name="[306]"></a>Figure_Graphic</STRONG> (Thumb, 202 bytes, Stack size 36 bytes, referee.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aim_lowlong
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aim_lowshort_stem
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aim_lowshort_3
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aim_lowshort_2
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aim_1
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Figure_aimline
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supercapacitor_figure
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sight_bead_figrue
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMPTY
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bullet_Warning
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockMuch_fifth_figure
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shootheatlimit_fourth_figure
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_aim_third_figure
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_second_figure
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_figure
</UL>

<P><STRONG><a name="[30e]"></a>Client_graphic_delete_update</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_SendChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2f6]"></a>Client_graphic_Info_update</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Figure_bool
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_SendChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startjudge_task
</UL>

<P><STRONG><a name="[310]"></a>Client_aim_update</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sight_bead_figrue
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_SendChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2f9]"></a>Client_supercapacitor_update</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;supercapacitor_figure
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_SendChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startjudge_task
</UL>

<P><STRONG><a name="[313]"></a>Float_Graphic</STRONG> (Thumb, 162 bytes, Stack size 36 bytes, referee.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_angle_float
</UL>

<P><STRONG><a name="[314]"></a>Client_gimbal_angle_update</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gimbal_angle_float
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_SendChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[316]"></a>Int_Graphic</STRONG> (Thumb, 162 bytes, Stack size 36 bytes, referee.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_int
</UL>

<P><STRONG><a name="[317]"></a>Client_bullet_int_update</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bullet_int
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_SendChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[319]"></a>Client_aim_line</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Figure_aimline
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_SendChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2fa]"></a>_high_aim_</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aim_1
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_SendChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startjudge_task
</UL>

<P><STRONG><a name="[2fb]"></a>_lowshort_aim_2</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aim_lowshort_2
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_SendChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startjudge_task
</UL>

<P><STRONG><a name="[2fc]"></a>_lowshort_aim_3</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aim_lowshort_3
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_SendChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startjudge_task
</UL>

<P><STRONG><a name="[2f7]"></a>_lowshortstem_aim_4</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aim_lowshort_stem
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_SendChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startjudge_task
</UL>

<P><STRONG><a name="[2f8]"></a>_lowlong_aim_</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC8_Check_Sum
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aim_lowlong
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Append_CRC16_Check_Sum
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_SendChar
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startjudge_task
</UL>

<P><STRONG><a name="[320]"></a>System_Normal_process</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, system_state.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_Ctrl
</UL>

<P><STRONG><a name="[c5]"></a>system_state_Ctrl</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, system_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = system_state_Ctrl &rArr; RC_Ctrl &rArr; KEY_Function_Ctrl &rArr; KeySW_Func &rArr; System_AllReset &rArr; GIM_Stop &rArr; CAN1_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Lost_Process
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Err_Process
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Ctrl
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Normal_process
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_STATE_TASK
</UL>

<P><STRONG><a name="[c6]"></a>Car_StateSync</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, system_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Car_StateSync
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN_Report
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_IMU_InitOver
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_CalOK_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_STATE_TASK
</UL>

<P><STRONG><a name="[c7]"></a>User_StateSyne</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, system_state.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = User_StateSyne &rArr; Judge_IF_CAN2_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_CAN2_Normal
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_DUM_Normal
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_CAN1_Normal
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_RC_Lost
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_RC_DataErr
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_Refer_Normal
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_STATE_TASK
</UL>

<P><STRONG><a name="[383]"></a>prev_sys_state_Err</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_state.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Lost_Process
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Err_Process
</UL>

<P><STRONG><a name="[bb]"></a>usart2_Init</STRONG> (Thumb, 258 bytes, Stack size 96 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = usart2_Init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Init
</UL>

<P><STRONG><a name="[327]"></a>Remote_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, remote.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart2_Init
</UL>

<P><STRONG><a name="[5e8]"></a>delay_ms1</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, remote.o(.text), UNUSED)

<P><STRONG><a name="[329]"></a>Get_RC_Data</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream5_IRQHandler
</UL>

<P><STRONG><a name="[22]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Stream5_IRQHandler &rArr; DMA_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RC_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40xx.o(RESET)
</UL>
<P><STRONG><a name="[32a]"></a>System_AllReset</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = System_AllReset &rArr; GIM_Stop &rArr; CAN1_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Stop
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySW_Func
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_cnt
</UL>

<P><STRONG><a name="[5e9]"></a>Set_Reset_cnt_Allow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, remote.o(.text), UNUSED)

<P><STRONG><a name="[32d]"></a>Reset_cnt</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Reset_cnt &rArr; System_AllReset &rArr; GIM_Stop &rArr; CAN1_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_AllReset
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Lost_Process
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Err_Process
</UL>

<P><STRONG><a name="[37e]"></a>Zero_Reset_tim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Ctrl
</UL>

<P><STRONG><a name="[32f]"></a>RC_Judge_sw_Change</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Function_Ctrl
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySW_Func
</UL>

<P><STRONG><a name="[32e]"></a>KeySW_Func</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = KeySW_Func &rArr; System_AllReset &rArr; GIM_Stop &rArr; CAN1_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Judge_sw_Change
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_AllReset
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[331]"></a>FirstGetInto_KEY_PRESS</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>

<P><STRONG><a name="[330]"></a>KEY_State_Judge</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FirstGetInto_KEY_PRESS
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_W
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_S
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_D
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_A
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Q
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_E
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_R
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_F
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_G
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Z
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_X
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_C
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_V
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_B
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SHIFT
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CTRL
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_L
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_R
</UL>

<P><STRONG><a name="[332]"></a>Key_Mouse_R</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Key_Mouse_R &rArr; Vision_Handler &rArr; AutoAim_ON &rArr; Predict_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_OFF
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Handler
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IF_AutoAim
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IF_CHANGE_PLAN_BUFF
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IF_CHANGE_PLAN_BUFF
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[336]"></a>Key_Mouse_L</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_Mouse_L &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_CLIP_OPEN
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire_ON
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire_OFF
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleFireRequest
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_KEY_ON
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_10
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLIP_Set_CloseNum
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[33a]"></a>Key_CTRL</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_CTRL &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN_Report
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_OFF
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_SPIN_CLOSING
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_KEY_OFF
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_CHAS_HeadF
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLIP_Set_CloseNum
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Turn_180
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[340]"></a>Key_SHIFT</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_SHIFT &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_KEY_ON
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_KEY_OFF
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[343]"></a>Key_B</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_B &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLIP_Set_OpenNum
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[345]"></a>Key_V</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_V &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_CLIP_OPEN
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleFireRequest
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffAim_ON
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffAim_OFF
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_anti_GYRO
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_anti_GYRO
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[348]"></a>Key_C</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_C &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRigh_180
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeft_180
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[34b]"></a>Key_X</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Key_X &rArr; Vision_Handler &rArr; AutoAim_ON &rArr; Predict_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Handler
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IF_BuffMode
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IF_SmallBuff
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[34e]"></a>Key_Z</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Key_Z &rArr; Vision_Handler &rArr; AutoAim_ON &rArr; Predict_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Handler
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IF_BuffMode
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IF_BigBuff
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[350]"></a>Key_G</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Key_G &rArr; Vision_Handler &rArr; AutoAim_ON &rArr; Predict_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_OFF
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Handler
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_anti_GYRO
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_anti_GYRO
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IF_ShootSentry
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IF_ShootSentry
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gim_Sentry_UP
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[354]"></a>Key_F</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_F &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_ON
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_Defense_Mode_Switch
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_CLOSING_Judge
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[358]"></a>Key_R</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_R &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire_ON
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire_OFF
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_15
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLIP_Set_CloseNum
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[35e]"></a>MECH_SlowlyTurnReset</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Q
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_E
</UL>

<P><STRONG><a name="[35b]"></a>MECH_SlowlyTurnRigh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_E
</UL>

<P><STRONG><a name="[35a]"></a>Key_E</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_E &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_AUTO_DEC
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRigh_90
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MECH_SlowlyTurnRigh
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MECH_SlowlyTurnReset
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[360]"></a>MECH_SlowlyTurnLeft</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Q
</UL>

<P><STRONG><a name="[35f]"></a>Key_Q</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_Q &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_AUTO_ADD
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeft_90
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MECH_SlowlyTurnLeft
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MECH_SlowlyTurnReset
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[363]"></a>Key_A</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_A &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_KeyFix_UP
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_Buff_AutoShoot_ON
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserSet_A_move
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_Defense_Mode_Reset
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[367]"></a>Key_D</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_D &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_KeyFix_DOWN
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_Buff_AutoShoot_ON
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserSet_D_move
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_Defense_Mode_Reset
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[36a]"></a>Key_S</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_S &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUT_AutoShoot_Tim
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserSet_S_move
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_Defense_Mode_Reset
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLIP_Set_CloseNum
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[36d]"></a>Key_W</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Key_W &rArr; KEY_State_Judge
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADD_AutoShoot_Tim
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserSet_W_move
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_Defense_Mode_Reset
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLIP_Set_CloseNum
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_State_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
</UL>

<P><STRONG><a name="[370]"></a>KEY_Function_Ctrl</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KEY_Function_Ctrl &rArr; KeySW_Func &rArr; System_AllReset &rArr; GIM_Stop &rArr; CAN1_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_W
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_S
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_D
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_A
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Q
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_E
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_R
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_F
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_G
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Z
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_X
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_C
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_V
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_B
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SHIFT
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CTRL
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_L
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_R
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySW_Func
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Ctrl
</UL>

<P><STRONG><a name="[372]"></a>RC_Judge_s2_Change</STRONG> (Thumb, 254 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Function_Ctrl
</UL>

<P><STRONG><a name="[371]"></a>RC_Function_Ctrl</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RC_Function_Ctrl &rArr; SPIN_OFF &rArr; YAW_MECH_Mid_Angle_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire_ON
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire_OFF
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleFireRequest
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_ON
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_OFF
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_CLOSING_Judge
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_MODULE_State_Update
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Clip_State_Updata
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Judge_s2_Change
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Judge_sw_Change
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Ctrl
</UL>

<P><STRONG><a name="[377]"></a>KEY_Move_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_InfoInit
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_InfoReset
</UL>

<P><STRONG><a name="[375]"></a>KEY_InfoReset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = KEY_InfoReset &rArr; Reset_CarHalfMove
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_KEY_OFF
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_CarHalfMove
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Move_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Mode_Ctrl
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Lost_Process
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Err_Process
</UL>

<P><STRONG><a name="[378]"></a>Function_turnOFF</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Function_turnOFF &rArr; Vision_OFF &rArr; AutoAim_OFF &rArr; Predict_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_OFF
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_KEY_OFF
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_OFF
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_InfoInit
</UL>

<P><STRONG><a name="[379]"></a>KEY_InfoInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY_InfoInit &rArr; Function_turnOFF &rArr; Vision_OFF &rArr; AutoAim_OFF &rArr; Predict_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_CarHalfMove
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_turnOFF
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Move_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Mode_Ctrl
</UL>

<P><STRONG><a name="[37b]"></a>RC_Judge_s1_Change</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Mode_Ctrl
</UL>

<P><STRONG><a name="[37a]"></a>RC_Mode_Ctrl</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RC_Mode_Ctrl &rArr; KEY_InfoInit &rArr; Function_turnOFF &rArr; Vision_OFF &rArr; AutoAim_OFF &rArr; Predict_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Judge_s1_Change
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_InfoInit
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_InfoReset
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Ctrl
</UL>

<P><STRONG><a name="[325]"></a>Judge_RC_DataErr</STRONG> (Thumb, 234 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_StateSyne
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_Speed_Change
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Check
</UL>

<P><STRONG><a name="[326]"></a>Judge_RC_Lost</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Judge_RC_Lost
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_StateSyne
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_Speed_Change
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Check
</UL>

<P><STRONG><a name="[37c]"></a>RC_Check</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RC_Check &rArr; Judge_RC_Lost
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_RC_Lost
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_RC_DataErr
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_State_Report
</UL>

<P><STRONG><a name="[37d]"></a>RC_State_Report</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RC_State_Report &rArr; RC_Check &rArr; Judge_RC_Lost
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Ctrl
</UL>

<P><STRONG><a name="[31f]"></a>RC_Ctrl</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RC_Ctrl &rArr; KEY_Function_Ctrl &rArr; KeySW_Func &rArr; System_AllReset &rArr; GIM_Stop &rArr; CAN1_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_State_Report
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Mode_Ctrl
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Function_Ctrl
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Function_Ctrl
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Zero_Reset_tim
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_CalOK_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_Ctrl
</UL>

<P><STRONG><a name="[381]"></a>RC_prev_s2_Err</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Err_Public
</UL>

<P><STRONG><a name="[380]"></a>RC_prev_s1_Err</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Err_Public
</UL>

<P><STRONG><a name="[37f]"></a>SYS_Err_Public</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYS_Err_Public
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_prev_s1_Err
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_prev_s2_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Lost_Process
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Err_Process
</UL>

<P><STRONG><a name="[382]"></a>RC_Protect</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Lost_Process
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Err_Process
</UL>

<P><STRONG><a name="[322]"></a>RC_Err_Process</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RC_Err_Process &rArr; Reset_cnt &rArr; System_AllReset &rArr; GIM_Stop &rArr; CAN1_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Protect
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Err_Public
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_InfoReset
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_cnt
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prev_sys_state_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_Ctrl
</UL>

<P><STRONG><a name="[321]"></a>RC_Lost_Process</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RC_Lost_Process &rArr; Reset_cnt &rArr; System_AllReset &rArr; GIM_Stop &rArr; CAN1_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Protect
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Err_Public
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_InfoReset
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_cnt
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prev_sys_state_Err
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_state_Ctrl
</UL>

<P><STRONG><a name="[27d]"></a>Report_S2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_RC_ctrlColor
</UL>

<P><STRONG><a name="[3ac]"></a>Report_MECH_SlowlyTurn</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Keyboard_Ctrl
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_YAW
</UL>

<P><STRONG><a name="[5ea]"></a>Infantry_Action_Ctrl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, remote.o(.text), UNUSED)

<P><STRONG><a name="[384]"></a>KeySlope_FB</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KeySlope_FB
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_CHAS_MaxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FB_Ctrl
</UL>

<P><STRONG><a name="[385]"></a>KeySlope_LR</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KeySlope_LR
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_CHAS_MaxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_LR_Ctrl
</UL>

<P><STRONG><a name="[386]"></a>KEY_FB_Ctrl</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY_FB_Ctrl &rArr; KeySlope_FB
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slow
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySlope_FB
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Keyboard_Ctrl
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN
</UL>

<P><STRONG><a name="[388]"></a>KEY_LR_Ctrl</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY_LR_Ctrl &rArr; KeySlope_LR
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Slow
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeySlope_LR
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Keyboard_Ctrl
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN
</UL>

<P><STRONG><a name="[389]"></a>SF</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, remote.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Y_Speed
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_X_Speed
</UL>

<P><STRONG><a name="[292]"></a>Mouse_X_Speed</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mouse_X_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YawVision_nolook
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Keyboard_Ctrl
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_YAW
</UL>

<P><STRONG><a name="[294]"></a>Mouse_Y_Speed</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Mouse_Y_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SF
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PitVision_nolook
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_PIT
</UL>

<P><STRONG><a name="[38f]"></a>PIT_AngleErrReport</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate_state
</UL>

<P><STRONG><a name="[38b]"></a>YAW_MotorAngle_Proc</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_MECH_Mid_Angle_Proc
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_YawDataSync_MECH
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_AngleErrReport
</UL>

<P><STRONG><a name="[38a]"></a>YAW_AngleErrReport</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = YAW_AngleErrReport
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_MotorAngle_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Get_Zerror
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Keyboard_Ctrl
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Get_Z_Speed
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_GYRO_AngleLimit
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate_state
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_CLOSING_Judge
</UL>

<P><STRONG><a name="[38c]"></a>GIM_Calibrate_state</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GIM_Calibrate_state &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM_6020_Init
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_AngleErrReport
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_AngleErrReport
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate
</UL>

<P><STRONG><a name="[394]"></a>GIM_Get_SpeedErr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_GetOutput
</UL>

<P><STRONG><a name="[391]"></a>GIM_Get_AngleErr</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GIM_Get_AngleErr
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_ReverseOver
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_TurnOver
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_GetOutput
</UL>

<P><STRONG><a name="[392]"></a>GIM_GetOutput</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GIM_GetOutput &rArr; GIM_Get_AngleErr
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Algorithm
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Get_AngleErr
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Get_SpeedErr
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Output
</UL>

<P><STRONG><a name="[395]"></a>GIM_Output</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GIM_Output &rArr; Judge_IF_NAN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Send
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_NAN
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_GetOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Remote_Ctrl
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Keyboard_Ctrl
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate
</UL>

<P><STRONG><a name="[397]"></a>PIT_MotorAngle_Proc</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_MECH_FirstPitAngle
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_PitchDataSync
</UL>

<P><STRONG><a name="[396]"></a>GIM_PitchDataSync</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GIM_PitchDataSync
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_MotorAngle_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl_PIT
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_PIT
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_PIT_Calibrate
</UL>

<P><STRONG><a name="[398]"></a>GIM_PIT_Calibrate</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GIM_PIT_Calibrate &rArr; GIM_PitchDataSync
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_PitchDataSync
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate
</UL>

<P><STRONG><a name="[399]"></a>GIM_YawDataSync_MECH</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GIM_YawDataSync_MECH
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_MotorAngle_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl_YAW
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_YAW
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_YAW_Calibrate
</UL>

<P><STRONG><a name="[39a]"></a>GIM_YAW_Calibrate</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GIM_YAW_Calibrate &rArr; GIM_YawDataSync_MECH
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_YawDataSync_MECH
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate
</UL>

<P><STRONG><a name="[39b]"></a>GIM_PID_Switch</STRONG> (Thumb, 768 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GIM_PID_Switch
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_SetPID
</UL>

<P><STRONG><a name="[39d]"></a>GIM_GET_PID_Type</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_AXIS_SetPID_type
</UL>

<P><STRONG><a name="[39c]"></a>GIM_AXIS_SetPID_type</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GIM_AXIS_SetPID_type
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_GET_PID_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_SetPID
</UL>

<P><STRONG><a name="[39e]"></a>GIM_SetPID</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GIM_SetPID &rArr; GIM_PID_Switch
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_AXIS_SetPID_type
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_PID_Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Reset
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Remote_Ctrl
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Keyboard_Ctrl
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate
</UL>

<P><STRONG><a name="[3a0]"></a>GIM_Cal_StateSync</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_GIM_Calibrate
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate
</UL>

<P><STRONG><a name="[39f]"></a>GIM_Calibrate</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GIM_Calibrate &rArr; GIM_Output &rArr; Judge_IF_NAN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM_6020_Init
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Cal_StateSync
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_SetPID
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_AXIS_SetPID_type
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_YAW_Calibrate
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_PIT_Calibrate
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Output
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate_state
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_RC_Ctrl
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_KET_Ctrl
</UL>

<P><STRONG><a name="[3a6]"></a>GIM_PitchDataSync_GYRO</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_PIT
</UL>

<P><STRONG><a name="[3a5]"></a>GIM_GYRO_FirstPitAngle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_PIT
</UL>

<P><STRONG><a name="[3a1]"></a>GIM_MECH_FirstPitAngle</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GIM_MECH_FirstPitAngle
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_MotorAngle_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_PIT
</UL>

<P><STRONG><a name="[351]"></a>Gim_Sentry_UP</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_PIT
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_G
</UL>

<P><STRONG><a name="[3a2]"></a>Keyboard_Ctrl_PIT</STRONG> (Thumb, 550 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Keyboard_Ctrl_PIT &rArr; AutoAimPit_Ctrl &rArr; AutoAim_Algorithm &rArr; Get_AccelData
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAimPit_Ctrl
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffAimPit_Ctrl
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_Y_Speed
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_ShoorSentry
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_MECH_FirstPitAngle
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_GYRO_FirstPitAngle
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_PitchDataSync_GYRO
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_PitchDataSync
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gim_Sentry_UP
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Keyboard_Ctrl
</UL>

<P><STRONG><a name="[3a8]"></a>YAW_IMUAngle_Proc</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_YawDataSync_GYRO
</UL>

<P><STRONG><a name="[3a7]"></a>GIM_YawDataSync_GYRO</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GIM_YawDataSync_GYRO
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_IMUAngle_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl_YAW
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_YAW
</UL>

<P><STRONG><a name="[3aa]"></a>GIM_GYRO_FirstYawAngle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl_YAW
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_YAW
</UL>

<P><STRONG><a name="[3ab]"></a>GIM_MECH_FirstYawAngle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl_YAW
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_YAW
</UL>

<P><STRONG><a name="[3a9]"></a>Keyboard_Ctrl_YAW</STRONG> (Thumb, 488 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Keyboard_Ctrl_YAW &rArr; AutoAimYaw_Ctrl &rArr; AutoAim_Algorithm &rArr; Get_AccelData
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAimYaw_Ctrl
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BuffAimYaw_Ctrl
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_X_Speed
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_MECH_FirstYawAngle
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_GYRO_FirstYawAngle
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_YawDataSync_GYRO
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_YawDataSync_MECH
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_MECH_SlowlyTurn
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Keyboard_Ctrl
</UL>

<P><STRONG><a name="[3ad]"></a>GIM_Keyboard_Ctrl</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = GIM_Keyboard_Ctrl &rArr; Keyboard_Ctrl_YAW &rArr; AutoAimYaw_Ctrl &rArr; AutoAim_Algorithm &rArr; Get_AccelData
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_YAW
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl_PIT
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_SetPID
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_KET_Ctrl
</UL>

<P><STRONG><a name="[3ae]"></a>Start_GIM_Calibrate</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Start_GIM_Calibrate
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Cal_StateSync
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_RC_Ctrl
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_KET_Ctrl
</UL>

<P><STRONG><a name="[3af]"></a>GIM_KET_Ctrl</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GIM_KET_Ctrl &rArr; GIM_Keyboard_Ctrl &rArr; Keyboard_Ctrl_YAW &rArr; AutoAimYaw_Ctrl &rArr; AutoAim_Algorithm &rArr; Get_AccelData
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_GIM_Calibrate
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Keyboard_Ctrl
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_Ctrl
</UL>

<P><STRONG><a name="[3b1]"></a>GIM_FirstPitAngle</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl_PIT
</UL>

<P><STRONG><a name="[3b0]"></a>Remote_Ctrl_PIT</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Remote_Ctrl_PIT &rArr; GIM_PitchDataSync
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_FirstPitAngle
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_PitchDataSync
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Remote_Ctrl
</UL>

<P><STRONG><a name="[3b2]"></a>Remote_Ctrl_YAW</STRONG> (Thumb, 152 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Remote_Ctrl_YAW &rArr; GIM_YawDataSync_GYRO
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_MECH_FirstYawAngle
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_GYRO_FirstYawAngle
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_YawDataSync_GYRO
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_YawDataSync_MECH
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Remote_Ctrl
</UL>

<P><STRONG><a name="[3b3]"></a>GIM_Remote_Ctrl</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = GIM_Remote_Ctrl &rArr; GIM_Output &rArr; Judge_IF_NAN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN_Report
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM_6020_Init
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl_YAW
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Ctrl_PIT
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_SetPID
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_RC_Ctrl
</UL>

<P><STRONG><a name="[3b4]"></a>GIM_RC_Ctrl</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GIM_RC_Ctrl &rArr; GIM_Remote_Ctrl &rArr; GIM_Output &rArr; Judge_IF_NAN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Remote_Ctrl
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_GIM_Calibrate
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_Ctrl
</UL>

<P><STRONG><a name="[ca]"></a>GIMBAL_Ctrl</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = GIMBAL_Ctrl &rArr; GIM_KET_Ctrl &rArr; GIM_Keyboard_Ctrl &rArr; Keyboard_Ctrl_YAW &rArr; AutoAimYaw_Ctrl &rArr; AutoAim_Algorithm &rArr; Get_AccelData
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_RC_Ctrl
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_KET_Ctrl
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_IMU_InitOver
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_TASK
</UL>

<P><STRONG><a name="[3b8]"></a>Judge_HalfMove_type</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSet_IF_CarHalfMove
</UL>

<P><STRONG><a name="[3b7]"></a>Reset_IF_SPIN_StopHalfMove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSet_IF_CarHalfMove
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_CarHalfMove
</UL>

<P><STRONG><a name="[3b6]"></a>Set_IF_SPIN_StopHalfMove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSet_IF_CarHalfMove
</UL>

<P><STRONG><a name="[3b5]"></a>SystemSet_IF_CarHalfMove</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemSet_IF_CarHalfMove
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN_Report
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IF_SPIN_StopHalfMove
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IF_SPIN_StopHalfMove
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_HalfMove_type
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_GET_Info
</UL>

<P><STRONG><a name="[3bb]"></a>TurnRighReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnReset
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_TurnOver
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeft_90
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeft_180
</UL>

<P><STRONG><a name="[3ba]"></a>TurnLeftReset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnReset
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_TurnOver
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRigh_90
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRigh_180
</UL>

<P><STRONG><a name="[3b9]"></a>Judge_IF_TurnOver</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Judge_IF_TurnOver &rArr; GIM_Get_AngleErr
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeftReset
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRighReset
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Get_AngleErr
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_GET_Info
</UL>

<P><STRONG><a name="[3bc]"></a>IMU_PitData_Report</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IMU_PitData_Report
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_PitAngle
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_PitSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Data_Report
</UL>

<P><STRONG><a name="[3be]"></a>IMU_YawData_Report</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IMU_YawData_Report
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_YawSpeed
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_YawAngle
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Data_Report
</UL>

<P><STRONG><a name="[3bf]"></a>IMU_Data_Report</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IMU_Data_Report &rArr; IMU_YawData_Report
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_YawData_Report
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_PitData_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_GET_Info
</UL>

<P><STRONG><a name="[c9]"></a>GIM_GET_Info</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GIM_GET_Info &rArr; Judge_IF_TurnOver &rArr; GIM_Get_AngleErr
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PID_Type
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Data_Report
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_TurnOver
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSet_IF_CarHalfMove
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_TASK
</UL>

<P><STRONG><a name="[5eb]"></a>GIM_Function_Switch</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gimbal.o(.text), UNUSED)

<P><STRONG><a name="[3c1]"></a>RC_GYRO_AngleLimit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gimbal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_AngleErrReport
</UL>

<P><STRONG><a name="[32c]"></a>GIM_Stop</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GIM_Stop &rArr; CAN1_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Reset
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_AllReset
</UL>

<P><STRONG><a name="[3c2]"></a>GIM_SetEmpty</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GIM_SetEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Reset
</UL>

<P><STRONG><a name="[cb]"></a>GIM_Reset</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GIM_Reset &rArr; GIM_Stop &rArr; CAN1_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_SetEmpty
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_SetPID
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_TASK
</UL>

<P><STRONG><a name="[323]"></a>GIM_CalOK_Report</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_StateSync
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASSIS_Ctrl
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRigh_90
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRigh_180
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeft_90
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeft_180
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_ON
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Ctrl
</UL>

<P><STRONG><a name="[361]"></a>TurnLeft_90</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TurnLeft_90
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRighReset
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_CalOK_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Q
</UL>

<P><STRONG><a name="[35c]"></a>TurnRigh_90</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TurnRigh_90
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeftReset
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_CalOK_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_E
</UL>

<P><STRONG><a name="[349]"></a>TurnLeft_180</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TurnLeft_180
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRighReset
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_CalOK_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_C
</UL>

<P><STRONG><a name="[34a]"></a>TurnRigh_180</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TurnRigh_180
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeftReset
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_CalOK_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_C
</UL>

<P><STRONG><a name="[3c3]"></a>TurnReset</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, gimbal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnLeftReset
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TurnRighReset
</UL>

<P><STRONG><a name="[3c4]"></a>Judge_DIR</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Judge_DIR
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Dir_TAIL
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Dir_HEAD
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Dir_Switch
</UL>

<P><STRONG><a name="[33f]"></a>CHAS_Turn_180</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_MECH_Mid_Angle_Proc
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CTRL
</UL>

<P><STRONG><a name="[3c7]"></a>YAW_MECH_Mid_Angle_Proc</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = YAW_MECH_Mid_Angle_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_MotorAngle_Proc
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Turn_180
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_OFF
</UL>

<P><STRONG><a name="[5ec]"></a>GimReverseTurn</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, gimbal.o(.text), UNUSED)

<P><STRONG><a name="[3c8]"></a>Judge_IF_ReverseOver</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gimbal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Get_AngleErr
</UL>

<P><STRONG><a name="[5ed]"></a>Report_IF_Reverse</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gimbal.o(.text), UNUSED)

<P><STRONG><a name="[36e]"></a>UserSet_W_move</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_W
</UL>

<P><STRONG><a name="[36b]"></a>UserSet_S_move</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_S
</UL>

<P><STRONG><a name="[364]"></a>UserSet_A_move</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_A
</UL>

<P><STRONG><a name="[368]"></a>UserSet_D_move</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_D
</UL>

<P><STRONG><a name="[3cb]"></a>HalfMove_KeyReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_CarHalfMove
</UL>

<P><STRONG><a name="[3c9]"></a>Reset_IF_MECH_StopHalfMove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_CarHalfMove
</UL>

<P><STRONG><a name="[5ee]"></a>Set_IF_MECH_StopHalfMove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gimbal.o(.text), UNUSED)

<P><STRONG><a name="[3ca]"></a>Reset_IF_CarHalfMove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_CarHalfMove_Switch
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_CarHalfMove
</UL>

<P><STRONG><a name="[3cd]"></a>Set_IF_CarHalfMove</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gimbal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_CarHalfMove_Switch
</UL>

<P><STRONG><a name="[376]"></a>Reset_CarHalfMove</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, gimbal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Reset_CarHalfMove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IF_CarHalfMove
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IF_MECH_StopHalfMove
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HalfMove_KeyReset
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IF_SPIN_StopHalfMove
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_InfoInit
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_InfoReset
</UL>

<P><STRONG><a name="[3cc]"></a>IF_CarHalfMove_Switch</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, gimbal.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_IF_CarHalfMove
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_IF_CarHalfMove
</UL>

<P><STRONG><a name="[3da]"></a>Get_CarHalfMove_Angle</STRONG> (Thumb, 174 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Get_Z_Speed
</UL>

<P><STRONG><a name="[2c5]"></a>YAW_GetGyroAngle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gimbal.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_Trigger
</UL>

<P><STRONG><a name="[5ef]"></a>PIT_GetGyroAngle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gimbal.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>PIT_GetMechAngle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_Trigger
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_ON
</UL>

<P><STRONG><a name="[118]"></a>GIM_Report_IF_NAN</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gimbal.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>

<P><STRONG><a name="[32b]"></a>CHAS_Stop</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CHAS_Stop &rArr; CAN1_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Reset
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASSIS_Ctrl
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_AllReset
</UL>

<P><STRONG><a name="[3ce]"></a>CHAS_PowerLimit</STRONG> (Thumb, 536 bytes, Stack size 32 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CHAS_PowerLimit &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_DUM_Normal
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_PowerBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Output
</UL>

<P><STRONG><a name="[3d1]"></a>CHAS_Get_SpeedErr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, chassis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_GetOutput
</UL>

<P><STRONG><a name="[3d0]"></a>CHAS_DataSync</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, chassis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_GetOutput
</UL>

<P><STRONG><a name="[3cf]"></a>CHAS_GetOutput</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CHAS_GetOutput &rArr; PID_Algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_DataSync
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Get_SpeedErr
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Algorithm
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Output
</UL>

<P><STRONG><a name="[3d2]"></a>power_limit</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = power_limit &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_DUM_Normal
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_PowerBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Output
</UL>

<P><STRONG><a name="[3d3]"></a>CHAS_Output</STRONG> (Thumb, 518 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CHAS_Output &rArr; Judge_IF_NAN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_Send
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_NAN
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power_limit
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_GetOutput
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_PowerLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Handler
</UL>

<P><STRONG><a name="[3d4]"></a>CHAS_SetMotorSpeed</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CHAS_SetMotorSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorSlow
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Handler
</UL>

<P><STRONG><a name="[3d7]"></a>Speed_Adapt</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, chassis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SetChasSpeed
</UL>

<P><STRONG><a name="[3d6]"></a>CHAS_SetChasSpeed</STRONG> (Thumb, 230 bytes, Stack size 4 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CHAS_SetChasSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Adapt
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Handler
</UL>

<P><STRONG><a name="[3d8]"></a>CHAS_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CHAS_Handler &rArr; CHAS_Output &rArr; Judge_IF_NAN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SetChasSpeed
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SetMotorSpeed
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Remote_Ctrl
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Keyboard_Ctrl
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN
</UL>

<P><STRONG><a name="[3d9]"></a>CHAS_Get_Z_Speed</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CHAS_Get_Z_Speed &rArr; PID_Algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_CHAS_IMU_YAW_Speed
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFilter
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Algorithm
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CarHalfMove_Angle
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_AngleErrReport
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Remote_Ctrl
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Keyboard_Ctrl
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN
</UL>

<P><STRONG><a name="[2d6]"></a>Report_SuperCap_cmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, chassis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_SuperCap_Info
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_CHAS_K_change_MECH
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_CHAS_K_change_GYRO
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_Speed
</UL>

<P><STRONG><a name="[3dc]"></a>SPIN_Speed</STRONG> (Thumb, 582 bytes, Stack size 16 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPIN_Speed
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_SuperCap_cmd
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_CHAS_MaxPower
</UL>
<BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN
</UL>

<P><STRONG><a name="[3dd]"></a>SPIN_GetSpeed_LR</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIN_GetSpeed_LR
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Keyboard_Ctrl
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN
</UL>

<P><STRONG><a name="[3e0]"></a>SPIN_GetSpeed_FB</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPIN_GetSpeed_FB
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Keyboard_Ctrl
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN
</UL>

<P><STRONG><a name="[3e1]"></a>CHAS_SPIN</STRONG> (Thumb, 664 bytes, Stack size 24 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CHAS_SPIN &rArr; CHAS_Handler &rArr; CHAS_Output &rArr; Judge_IF_NAN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_SuperCap_cmd
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_GetSpeed_FB
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_GetSpeed_LR
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_Speed
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Get_Z_Speed
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Handler
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_AngleErrReport
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_LR_Ctrl
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FB_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_RC_Ctrl
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_KET_Ctrl
</UL>

<P><STRONG><a name="[3e2]"></a>CHAS_PID_Switch</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CHAS_PID_Switch
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SetPID
</UL>

<P><STRONG><a name="[3e3]"></a>CHAS_SetPID</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CHAS_SetPID &rArr; CHAS_PID_Switch
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_PID_Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Reset
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Remote_Ctrl
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Keyboard_Ctrl
</UL>

<P><STRONG><a name="[3e4]"></a>SuperCap_CHAS_K_change_GYRO</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SuperCap_CHAS_K_change_GYRO
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_SuperCap_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Keyboard_Ctrl
</UL>

<P><STRONG><a name="[3e5]"></a>SuperCap_CHAS_K_change_MECH</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SuperCap_CHAS_K_change_MECH
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_SuperCap_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Keyboard_Ctrl
</UL>

<P><STRONG><a name="[3e6]"></a>CHAS_Keyboard_Ctrl</STRONG> (Thumb, 1140 bytes, Stack size 24 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CHAS_Keyboard_Ctrl &rArr; CHAS_Handler &rArr; CHAS_Output &rArr; Judge_IF_NAN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mouse_X_Speed
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_CHAS_K_change_MECH
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_CHAS_K_change_GYRO
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SetPID
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_GetSpeed_FB
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_GetSpeed_LR
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Get_Z_Speed
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Handler
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_AngleErrReport
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_LR_Ctrl
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FB_Ctrl
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_MECH_SlowlyTurn
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_KET_Ctrl
</UL>

<P><STRONG><a name="[3ea]"></a>SPIN_Reset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, chassis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_RC_Ctrl
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_KET_Ctrl
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_ON
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_CLOSING_Judge
</UL>

<P><STRONG><a name="[3e7]"></a>CHAS_SetEmpty</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CHAS_SetEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Reset
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_RC_Ctrl
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_KET_Ctrl
</UL>

<P><STRONG><a name="[3e8]"></a>CHAS_KET_Ctrl</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CHAS_KET_Ctrl &rArr; CHAS_Keyboard_Ctrl &rArr; CHAS_Handler &rArr; CHAS_Output &rArr; Judge_IF_NAN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RM_3508_Init
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SetEmpty
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_Reset
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Keyboard_Ctrl
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASSIS_Ctrl
</UL>

<P><STRONG><a name="[3eb]"></a>CHAS_Remote_Ctrl</STRONG> (Thumb, 558 bytes, Stack size 16 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CHAS_Remote_Ctrl &rArr; CHAS_Handler &rArr; CHAS_Output &rArr; Judge_IF_NAN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SetPID
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Get_Z_Speed
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_RC_Ctrl
</UL>

<P><STRONG><a name="[3ec]"></a>CHAS_RC_Ctrl</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CHAS_RC_Ctrl &rArr; CHAS_SPIN &rArr; CHAS_Handler &rArr; CHAS_Output &rArr; Judge_IF_NAN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RM_3508_Init
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Remote_Ctrl
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SetEmpty
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_Reset
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASSIS_Ctrl
</UL>

<P><STRONG><a name="[cd]"></a>CHASSIS_Ctrl</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = CHASSIS_Ctrl &rArr; CHAS_RC_Ctrl &rArr; CHAS_SPIN &rArr; CHAS_Handler &rArr; CHAS_Output &rArr; Judge_IF_NAN &rArr; __aeabi_f2d
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_RC_Ctrl
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_KET_Ctrl
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Stop
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_CalOK_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASSIS_TASK
</UL>

<P><STRONG><a name="[3ed]"></a>CHAS_Dir_Switch</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CHAS_Dir_Switch &rArr; Judge_DIR
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_DIR
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_GET_Info
</UL>

<P><STRONG><a name="[3ef]"></a>CHAS_GET_PID_Type</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, chassis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SetPID_type
</UL>

<P><STRONG><a name="[3ee]"></a>CHAS_SetPID_type</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CHAS_SetPID_type
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_GET_PID_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_GET_Info
</UL>

<P><STRONG><a name="[cc]"></a>CHAS_GET_Info</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CHAS_GET_Info &rArr; CHAS_Dir_Switch &rArr; Judge_DIR
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SetPID_type
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Dir_Switch
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PID_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASSIS_TASK
</UL>

<P><STRONG><a name="[3c5]"></a>CHAS_Dir_HEAD</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, chassis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_DIR
</UL>

<P><STRONG><a name="[3c6]"></a>CHAS_Dir_TAIL</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, chassis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_DIR
</UL>

<P><STRONG><a name="[3f0]"></a>CHAS_Dir_Report</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_CHAS_HeadF
</UL>

<P><STRONG><a name="[33e]"></a>Judge_IF_CHAS_HeadF</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Judge_IF_CHAS_HeadF
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Dir_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CTRL
</UL>

<P><STRONG><a name="[ce]"></a>CHAS_Reset</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CHAS_Reset &rArr; CHAS_Stop &rArr; CAN1_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SetEmpty
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SetPID
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASSIS_TASK
</UL>

<P><STRONG><a name="[5f0]"></a>GravityCenterFIX_FB</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, chassis.o(.text), UNUSED)

<P><STRONG><a name="[5f1]"></a>GravityCenterFIX_LR</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, chassis.o(.text), UNUSED)

<P><STRONG><a name="[3f1]"></a>CarFly_React</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, chassis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_IF_CarFly
</UL>

<P><STRONG><a name="[3f3]"></a>CarFly_Over_React</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, chassis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_IF_CarFly
</UL>

<P><STRONG><a name="[5f2]"></a>CHAS_Get_AngleErr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, chassis.o(.text), UNUSED)

<P><STRONG><a name="[3f4]"></a>CHAS_Get_Zerror</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, chassis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Algorithm
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_AngleErrReport
</UL>

<P><STRONG><a name="[5f3]"></a>CHAS_Report_Output_LF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text), UNUSED)

<P><STRONG><a name="[5f4]"></a>CHAS_Report_Output_RF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text), UNUSED)

<P><STRONG><a name="[5f5]"></a>CHAS_Report_Output_LB</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text), UNUSED)

<P><STRONG><a name="[5f6]"></a>CHAS_Report_Output_RB</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>CHAS_Report_Speed_LF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CHAS_Data
</UL>

<P><STRONG><a name="[f0]"></a>CHAS_Report_Speed_RF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CHAS_Data
</UL>

<P><STRONG><a name="[ed]"></a>CHAS_Report_Speed_LB</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CHAS_Data
</UL>

<P><STRONG><a name="[ef]"></a>CHAS_Report_Speed_RB</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CHAS_Data
</UL>

<P><STRONG><a name="[2df]"></a>CHAS_SPIN_Report</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_StateSync
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_ctrl_cmd
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSet_IF_CarHalfMove
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Remote_Ctrl
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_Defense_Mode_Switch
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CTRL
</UL>

<P><STRONG><a name="[33c]"></a>Report_IF_SPIN_CLOSING</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_CLOSING_Judge
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CTRL
</UL>

<P><STRONG><a name="[357]"></a>SPIN_ON</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIN_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_Reset
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_CalOK_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_KEY_Switch
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Function_Ctrl
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_F
</UL>

<P><STRONG><a name="[365]"></a>SPIN_Defense_Mode_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_OFF
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_W
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_S
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_D
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_A
</UL>

<P><STRONG><a name="[33d]"></a>SPIN_OFF</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPIN_OFF &rArr; YAW_MECH_Mid_Angle_Proc
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_MECH_Mid_Angle_Proc
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_Defense_Mode_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_KEY_Switch
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_turnOFF
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Function_Ctrl
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CTRL
</UL>

<P><STRONG><a name="[355]"></a>SPIN_CLOSING_Judge</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPIN_CLOSING_Judge &rArr; YAW_AngleErrReport
</UL>
<BR>[Calls]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_Reset
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;YAW_AngleErrReport
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_SPIN_CLOSING
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Function_Ctrl
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_F
</UL>

<P><STRONG><a name="[3f5]"></a>SPIN_KEY_Switch</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, chassis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_ON
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_OFF
</UL>

<P><STRONG><a name="[356]"></a>SPIN_Defense_Mode_Switch</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, chassis.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPIN_Defense_Mode_Switch
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SPIN_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_F
</UL>

<P><STRONG><a name="[3f8]"></a>SuperCap_Urgent_OFF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_Emergency
</UL>

<P><STRONG><a name="[3f7]"></a>SuperCap_Urgent_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_Emergency
</UL>

<P><STRONG><a name="[3f6]"></a>SuperCap_Emergency</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, chassis.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_Urgent_ON
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SuperCap_Urgent_OFF
</UL>

<P><STRONG><a name="[342]"></a>SuperCap_KEY_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SHIFT
</UL>

<P><STRONG><a name="[341]"></a>SuperCap_KEY_OFF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Function_turnOFF
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_InfoReset
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_SHIFT
</UL>

<P><STRONG><a name="[117]"></a>CHAS_Report_IF_NAN</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, chassis.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Feed
</UL>

<P><STRONG><a name="[3f9]"></a>Clip_Close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clip_Close
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Clip_Ctrl
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Clip_Ctrl
</UL>

<P><STRONG><a name="[3fb]"></a>Clip_Open</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clip_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Clip_Ctrl
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Clip_Ctrl
</UL>

<P><STRONG><a name="[3fc]"></a>KEY_Clip_Ctrl</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY_Clip_Ctrl &rArr; Clip_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clip_Open
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clip_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Ctrl
</UL>

<P><STRONG><a name="[3ff]"></a>AimLED_Off</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_AimLED_Ctrl
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_AimLED_Ctrl
</UL>

<P><STRONG><a name="[3fe]"></a>AimLED_On</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_AimLED_Ctrl
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_AimLED_Ctrl
</UL>

<P><STRONG><a name="[3fd]"></a>KEY_AimLED_Ctrl</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = KEY_AimLED_Ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AimLED_On
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AimLED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Ctrl
</UL>

<P><STRONG><a name="[402]"></a>Fric_3508_Get_SpeedErr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_GetOutput
</UL>

<P><STRONG><a name="[401]"></a>Fric_3508_DataSync</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_GetOutput
</UL>

<P><STRONG><a name="[400]"></a>Fric_3508_GetOutput</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Fric_3508_GetOutput &rArr; PID_Algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_DataSync
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_Get_SpeedErr
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Algorithm
</UL>
<BR>[Called By]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_Handler
</UL>

<P><STRONG><a name="[403]"></a>Fric_3508_Handler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Fric_3508_Handler &rArr; Fric_3508_GetOutput &rArr; PID_Algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_GetOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Reset
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Friction_Ctrl
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Friction_Ctrl
</UL>

<P><STRONG><a name="[406]"></a>Fric_R_Set_SpeedTarget</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_Speed_Slope
</UL>

<P><STRONG><a name="[405]"></a>Fric_L_Set_SpeedTarget</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_Speed_Slope
</UL>

<P><STRONG><a name="[404]"></a>Fric_Speed_Slope</STRONG> (Thumb, 156 bytes, Stack size 4 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Fric_Speed_Slope
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_L_Set_SpeedTarget
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_R_Set_SpeedTarget
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Reset
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Off
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_Speed_Change
</UL>

<P><STRONG><a name="[407]"></a>Module_GetReferInfo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Module_GetReferInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Shoot_SpeedLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_Speed_Change
</UL>

<P><STRONG><a name="[408]"></a>Fric_Speed_Change</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Fric_Speed_Change &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_DUM_Normal
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Module_GetReferInfo
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_Speed_Slope
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_RC_Lost
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_RC_DataErr
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_On
</UL>

<P><STRONG><a name="[409]"></a>Friction_On</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Friction_On &rArr; Fric_Speed_Change &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_Speed_Change
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Friction_Ctrl
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Friction_Ctrl
</UL>

<P><STRONG><a name="[40a]"></a>Friction_Off</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Friction_Off &rArr; Fric_Speed_Slope
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_Speed_Slope
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Friction_Ctrl
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Friction_Ctrl
</UL>

<P><STRONG><a name="[40b]"></a>Fric_3508_SetPID</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Fric_3508_SetPID &rArr; Fric_3508_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Friction_Ctrl
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Friction_Ctrl
</UL>

<P><STRONG><a name="[40d]"></a>KEY_Friction_Ctrl</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = KEY_Friction_Ctrl &rArr; Fric_3508_Handler &rArr; Fric_3508_GetOutput &rArr; PID_Algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_SetPID
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Off
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_On
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Ctrl
</UL>

<P><STRONG><a name="[40e]"></a>Clip_turn</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clip_turn
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clip_Reset
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_GetInto_Mode
</UL>

<P><STRONG><a name="[40f]"></a>First_GetInto_Mode</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = First_GetInto_Mode &rArr; Clip_turn
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clip_turn
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Ctrl
</UL>

<P><STRONG><a name="[410]"></a>RC_Clip_Ctrl</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RC_Clip_Ctrl &rArr; Clip_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clip_Open
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clip_Close
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Ctrl
</UL>

<P><STRONG><a name="[411]"></a>RC_AimLED_Ctrl</STRONG> (Thumb, 100 bytes, Stack size 4 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RC_AimLED_Ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AimLED_On
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AimLED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Ctrl
</UL>

<P><STRONG><a name="[412]"></a>RC_Friction_Ctrl</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RC_Friction_Ctrl &rArr; Fric_3508_Handler &rArr; Fric_3508_GetOutput &rArr; PID_Algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_SetPID
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Off
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_On
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Ctrl
</UL>

<P><STRONG><a name="[d0]"></a>MODULE_Ctrl</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MODULE_Ctrl &rArr; RC_Friction_Ctrl &rArr; Fric_3508_Handler &rArr; Fric_3508_GetOutput &rArr; PID_Algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Friction_Ctrl
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_AimLED_Ctrl
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Clip_Ctrl
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;First_GetInto_Mode
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Friction_Ctrl
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_AimLED_Ctrl
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Clip_Ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_TASK
</UL>

<P><STRONG><a name="[419]"></a>Temp_Fix_30S</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_SpeedFIX
</UL>

<P><STRONG><a name="[416]"></a>SpeedAdapt</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_SpeedFIX
</UL>

<P><STRONG><a name="[418]"></a>Temp_Fix_18S</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_SpeedFIX
</UL>

<P><STRONG><a name="[417]"></a>Temp_Fix_15S</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_SpeedFIX
</UL>

<P><STRONG><a name="[413]"></a>Friction_SpeedFIX</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Friction_SpeedFIX
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Shoot_NUM
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_RealShootSpeed
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Fix_15S
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Fix_18S
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedAdapt
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Temp_Fix_30S
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_GetInfo
</UL>

<P><STRONG><a name="[41a]"></a>Check_IF_ArmorBooster_Deinit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Check_IF_ArmorBooster_Deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_IF_ArmorBooster_work
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_GetInfo
</UL>

<P><STRONG><a name="[41d]"></a>Judge_Clip_state</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_GetInfo
</UL>

<P><STRONG><a name="[41c]"></a>Friction_SetInitNum</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Friction_SetInitNum &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_DUM_Normal
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_IF_ArmorBooster_work
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_GetInfo
</UL>

<P><STRONG><a name="[cf]"></a>MODULE_GetInfo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MODULE_GetInfo &rArr; Friction_SetInitNum &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_DUM_Normal
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_SetInitNum
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_Clip_state
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_IF_ArmorBooster_Deinit
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_SpeedFIX
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_TASK
</UL>

<P><STRONG><a name="[41e]"></a>Friction_Reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Friction_Reset &rArr; Fric_3508_Handler &rArr; Fric_3508_GetOutput &rArr; PID_Algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_Speed_Slope
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Reset
</UL>

<P><STRONG><a name="[420]"></a>AimLED_Reset</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Reset
</UL>

<P><STRONG><a name="[41f]"></a>Clip_Reset</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Clip_Reset &rArr; Clip_turn
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clip_turn
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Reset
</UL>

<P><STRONG><a name="[d1]"></a>MODULE_Reset</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MODULE_Reset &rArr; Friction_Reset &rArr; Fric_3508_Handler &rArr; Fric_3508_GetOutput &rArr; PID_Algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clip_Reset
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AimLED_Reset
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_TASK
</UL>

<P><STRONG><a name="[421]"></a>Friction_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Friction_Init &rArr; PWM_Friction_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Friction_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Init
</UL>

<P><STRONG><a name="[5f7]"></a>Friction_Init_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, module.o(.text), UNUSED)

<P><STRONG><a name="[5f8]"></a>Friction_Init_Delay</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, module.o(.text), UNUSED)

<P><STRONG><a name="[423]"></a>Report_IF_Fric_Init_Over</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_MODULE_State_Update
</UL>

<P><STRONG><a name="[422]"></a>Clip_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Clip_Init &rArr; PWM_Clip_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Clip_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_Init
</UL>

<P><STRONG><a name="[af]"></a>MODULE_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MODULE_Init &rArr; Clip_Init &rArr; PWM_Clip_Init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clip_Init
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Friction_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[373]"></a>RC_MODULE_State_Update</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, module.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RC_MODULE_State_Update
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_Fric_Init_Over
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Function_Ctrl
</UL>

<P><STRONG><a name="[374]"></a>RC_Clip_State_Updata</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Function_Ctrl
</UL>

<P><STRONG><a name="[2de]"></a>Report_IF_CLIP_OPEN</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_ctrl_cmd
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_V
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_L
</UL>

<P><STRONG><a name="[339]"></a>CLIP_Set_CloseNum</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Clip_State_Updata
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_W
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_S
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_R
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CTRL
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_L
</UL>

<P><STRONG><a name="[344]"></a>CLIP_Set_OpenNum</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Clip_State_Updata
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_B
</UL>

<P><STRONG><a name="[424]"></a>KEY_Clip_State_Updata</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, module.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShootNum_Reset
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLIP_Set_OpenNum
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLIP_Set_CloseNum
</UL>

<P><STRONG><a name="[281]"></a>Report_Shoot_Speed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Reset
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_AIM_Ctrl
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_BUFF_Ctrl
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMALL_BUFF_Ctrl
</UL>

<P><STRONG><a name="[338]"></a>Module_KEY_ON</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_L
</UL>

<P><STRONG><a name="[33b]"></a>Module_KEY_OFF</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_CTRL
</UL>

<P><STRONG><a name="[425]"></a>Fric_3508_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, module.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send
</UL>

<P><STRONG><a name="[426]"></a>Fric_3508_Reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, module.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[432]"></a>Report_IF_Fric3508_SetSpeed</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, module.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleFire
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire
</UL>

<P><STRONG><a name="[42b]"></a>RIFLE_Get_SpeedErr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GetOutput
</UL>

<P><STRONG><a name="[42a]"></a>RIFLE_Get_AngleErr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GetOutput
</UL>

<P><STRONG><a name="[428]"></a>RIFLE_MotorAngle_Proc</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_DataSync
</UL>

<P><STRONG><a name="[427]"></a>RIFLE_DataSync</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RIFLE_DataSync
</UL>
<BR>[Calls]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_MotorAngle_Proc
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GetOutput
</UL>

<P><STRONG><a name="[429]"></a>RIFLE_GetOutput</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RIFLE_GetOutput &rArr; PID_Algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_DataSync
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Get_AngleErr
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Get_SpeedErr
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Algorithm
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Output
</UL>

<P><STRONG><a name="[42c]"></a>RIFLE_Output</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RIFLE_Output &rArr; RIFLE_GetOutput &rArr; PID_Algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GetOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Handler
</UL>

<P><STRONG><a name="[42d]"></a>RIFLE_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RIFLE_Handler &rArr; RIFLE_Output &rArr; RIFLE_GetOutput &rArr; PID_Algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Output
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Ctrl
</UL>

<P><STRONG><a name="[433]"></a>RIFLE_MotorAngleInit</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire_OFF
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_RC_Ctrl
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_MECH_RC_Ctrl
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GYRO_RC_Ctrl
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_KET_Ctrl
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConFireBlock_React
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleFire
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire
</UL>

<P><STRONG><a name="[42e]"></a>Judge_IF_Heat_ShootAllow</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Judge_IF_Heat_ShootAllow &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_DUM_Normal
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_CoolingLimit
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Shoot_Heat
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire
</UL>

<P><STRONG><a name="[431]"></a>ContinFire</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ContinFire &rArr; Judge_IF_Heat_ShootAllow &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_Heat_ShootAllow
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_MotorAngleInit
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_Fric3508_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GYRO_RC_Ctrl
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl
</UL>

<P><STRONG><a name="[436]"></a>Single_Forward</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleFire
</UL>

<P><STRONG><a name="[434]"></a>Judge_IF_SingleHeat_ShootAllow</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Judge_IF_SingleHeat_ShootAllow &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_DUM_Normal
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_CoolingLimit
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Shoot_Heat
</UL>
<BR>[Called By]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleFire
</UL>

<P><STRONG><a name="[435]"></a>SingleFire</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SingleFire &rArr; Judge_IF_SingleHeat_ShootAllow &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_SingleHeat_ShootAllow
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_Forward
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_MotorAngleInit
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_Fric3508_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_MECH_RC_Ctrl
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl
</UL>

<P><STRONG><a name="[43c]"></a>FlagReset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Reset
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_MECH_RC_Ctrl
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GYRO_RC_Ctrl
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl
</UL>

<P><STRONG><a name="[437]"></a>ContinFreq_03</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_Change_HeatLimit
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_12
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_20
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_15
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_10
</UL>

<P><STRONG><a name="[337]"></a>ContinFreq_10</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ContinFreq_10
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_CoolingLimit
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Shoot_Heat
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_03
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GYRO_RC_Ctrl
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_L
</UL>

<P><STRONG><a name="[438]"></a>RIFLE_PID_Switch</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RIFLE_PID_Switch
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_SetPID
</UL>

<P><STRONG><a name="[43a]"></a>RIFLE_GET_PID_Type</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_SetPID
</UL>

<P><STRONG><a name="[439]"></a>RIFLE_SetPID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RIFLE_SetPID &rArr; RIFLE_PID_Switch
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GET_PID_Type
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_PID_Switch
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Reset
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_MECH_RC_Ctrl
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GYRO_RC_Ctrl
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl
</UL>

<P><STRONG><a name="[43b]"></a>Keyboard_Ctrl</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Keyboard_Ctrl &rArr; SingleFire &rArr; Judge_IF_SingleHeat_ShootAllow &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_SetPID
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagReset
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleFire
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_10
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_KET_Ctrl
</UL>

<P><STRONG><a name="[43e]"></a>BlockState_Reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinFireBlock_React
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConFireBlock_React
</UL>

<P><STRONG><a name="[43d]"></a>ConFireBlock_React</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ConFireBlock_React
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockState_Reset
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_MotorAngleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockReact
</UL>

<P><STRONG><a name="[441]"></a>SetAngle_stay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinFireBlock_React
</UL>

<P><STRONG><a name="[440]"></a>Single_Reverse</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinFireBlock_React
</UL>

<P><STRONG><a name="[43f]"></a>SinFireBlock_React</STRONG> (Thumb, 140 bytes, Stack size 4 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SinFireBlock_React
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Single_Reverse
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAngle_stay
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockState_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockReact
</UL>

<P><STRONG><a name="[442]"></a>BlockReact</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BlockReact &rArr; SinFireBlock_React
</UL>
<BR>[Calls]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinFireBlock_React
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConFireBlock_React
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_RC_Ctrl
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_KET_Ctrl
</UL>

<P><STRONG><a name="[443]"></a>RIFLE_KET_Ctrl</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RIFLE_KET_Ctrl &rArr; Keyboard_Ctrl &rArr; SingleFire &rArr; Judge_IF_SingleHeat_ShootAllow &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buff_AutoShoot
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_2006_Init
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockReact
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_Ctrl
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_MotorAngleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Ctrl
</UL>

<P><STRONG><a name="[445]"></a>RIFLE_GYRO_RC_Ctrl</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RIFLE_GYRO_RC_Ctrl &rArr; ContinFire &rArr; Judge_IF_Heat_ShootAllow &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_SetPID
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagReset
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_MotorAngleInit
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_10
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_RC_Ctrl
</UL>

<P><STRONG><a name="[446]"></a>RIFLE_MECH_RC_Ctrl</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RIFLE_MECH_RC_Ctrl &rArr; SingleFire &rArr; Judge_IF_SingleHeat_ShootAllow &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_SetPID
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagReset
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleFire
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_MotorAngleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_RC_Ctrl
</UL>

<P><STRONG><a name="[447]"></a>RIFLE_RC_Ctrl</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RIFLE_RC_Ctrl &rArr; RIFLE_MECH_RC_Ctrl &rArr; SingleFire &rArr; Judge_IF_SingleHeat_ShootAllow &rArr; Judge_IF_DUM_Normal
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_2006_Init
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_MECH_RC_Ctrl
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GYRO_RC_Ctrl
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockReact
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_MotorAngleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Ctrl
</UL>

<P><STRONG><a name="[d3]"></a>RIFLE_Ctrl</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RIFLE_Ctrl &rArr; RIFLE_Handler &rArr; RIFLE_Output &rArr; RIFLE_GetOutput &rArr; PID_Algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_RC_Ctrl
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_KET_Ctrl
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_TASK
</UL>

<P><STRONG><a name="[450]"></a>Check_IF_FricSpeed_Normal</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GET_Info
</UL>

<P><STRONG><a name="[449]"></a>Stuck_Judge</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagUpdate
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_ConFireBlock
</UL>

<P><STRONG><a name="[44f]"></a>IF_FireBlock</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire_ON
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleFireRequest
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagUpdate
</UL>

<P><STRONG><a name="[448]"></a>Judge_ConFireBlock</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Judge_ConFireBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stuck_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagUpdate
</UL>

<P><STRONG><a name="[44b]"></a>Judge_IF_SingleFire_OVER</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagUpdate
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_SinFireBlock
</UL>

<P><STRONG><a name="[44a]"></a>Judge_SinFireBlock</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Judge_SinFireBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_SingleFire_OVER
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagUpdate
</UL>

<P><STRONG><a name="[44e]"></a>ConFireRequest_Report</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleFireRequest
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagUpdate
</UL>

<P><STRONG><a name="[44d]"></a>SinFireRequest_Report</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire_ON
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagUpdate
</UL>

<P><STRONG><a name="[44c]"></a>FlagUpdate</STRONG> (Thumb, 98 bytes, Stack size 4 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FlagUpdate &rArr; Judge_SinFireBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinFireRequest_Report
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConFireRequest_Report
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_SinFireBlock
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_SingleFire_OVER
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_ConFireBlock
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_FireBlock
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stuck_Judge
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GET_Info
</UL>

<P><STRONG><a name="[d2]"></a>RIFLE_GET_Info</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RIFLE_GET_Info &rArr; FlagUpdate &rArr; Judge_SinFireBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagUpdate
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_IF_FricSpeed_Normal
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GET_PID_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_TASK
</UL>

<P><STRONG><a name="[451]"></a>RIFLE_Stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RIFLE_Stop &rArr; CAN2_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Reset
</UL>

<P><STRONG><a name="[d4]"></a>RIFLE_Reset</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RIFLE_Reset &rArr; RIFLE_Stop &rArr; CAN2_Send &rArr; CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Stop
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_SetPID
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FlagReset
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_TASK
</UL>

<P><STRONG><a name="[5f9]"></a>Single_Forward_HALF</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rifle.o(.text), UNUSED)

<P><STRONG><a name="[5fa]"></a>Single_Reverse_HALF</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, rifle.o(.text), UNUSED)

<P><STRONG><a name="[452]"></a>ContinFreq_20</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rifle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_CoolingLimit
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Shoot_Heat
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_03
</UL>

<P><STRONG><a name="[359]"></a>ContinFreq_15</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ContinFreq_15
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_CoolingLimit
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Shoot_Heat
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_03
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_R
</UL>

<P><STRONG><a name="[453]"></a>ContinFreq_12</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rifle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_CoolingLimit
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Shoot_Heat
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_03
</UL>

<P><STRONG><a name="[454]"></a>Judge_IF_Change_HeatLimit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rifle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_CoolingLimit
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Shoot_Heat
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFreq_03
</UL>

<P><STRONG><a name="[5fb]"></a>ContinFreq_05</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rifle.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>Reset_Block_num</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataUpdate
</UL>

<P><STRONG><a name="[455]"></a>Judge_IF_SinBlocks</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_SinBlocks
</UL>

<P><STRONG><a name="[2e0]"></a>Report_IF_SinBlocks</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Report_IF_SinBlocks
</UL>
<BR>[Calls]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_SinBlocks
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_ctrl_cmd
</UL>

<P><STRONG><a name="[456]"></a>Report_IF_FricSpeed_Normal</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContinFire_ON
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingleFireRequest
</UL>

<P><STRONG><a name="[2aa]"></a>SingleFireRequest</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SingleFireRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buff_AutoShoot_CntReset
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_FricSpeed_Normal
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConFireRequest_Report
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_FireBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_AutoShoot
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Buff_AutoShoot
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Function_Ctrl
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_V
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_L
</UL>

<P><STRONG><a name="[2c3]"></a>ContinFire_ON</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ContinFire_ON
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_FricSpeed_Normal
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SinFireRequest_Report
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IF_FireBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Yaw_AutoShoot
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Function_Ctrl
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_R
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_L
</UL>

<P><STRONG><a name="[2c0]"></a>ContinFire_OFF</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ContinFire_OFF
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_MotorAngleInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoShoot_Reset
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RC_Function_Ctrl
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_R
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Mouse_L
</UL>

<P><STRONG><a name="[2e1]"></a>Report_IF_ShootHeatLimit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, rifle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_ctrl_cmd
</UL>

<P><STRONG><a name="[5fc]"></a>Brust_ON</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rifle.o(.text), UNUSED)

<P><STRONG><a name="[5fd]"></a>Brust_OFF</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rifle.o(.text), UNUSED)

<P><STRONG><a name="[457]"></a>Judge_IF_BulletWarning</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Judge_IF_BulletWarning
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DUM_Report_Shoot_NUM
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Report_IF_BulletWarning
</UL>

<P><STRONG><a name="[2e2]"></a>Report_IF_BulletWarning</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rifle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Report_IF_BulletWarning &rArr; Judge_IF_BulletWarning
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_BulletWarning
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_UI_ctrl_cmd
</UL>

<P><STRONG><a name="[5fe]"></a>Reset_BulletWarning</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rifle.o(.text), UNUSED)

<P><STRONG><a name="[458]"></a>M_2006_ParamInit</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_2006_Init
</UL>

<P><STRONG><a name="[444]"></a>M_2006_Init</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = M_2006_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_2006_ParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Init
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_RC_Ctrl
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_KET_Ctrl
</UL>

<P><STRONG><a name="[45a]"></a>GIM_PitParamInit</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM_6020_Init
</UL>

<P><STRONG><a name="[459]"></a>GIM_YawParamInit</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM_6020_Init
</UL>

<P><STRONG><a name="[390]"></a>GM_6020_Init</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GM_6020_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_YawParamInit
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_PitParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Init
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Remote_Ctrl
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate_state
</UL>

<P><STRONG><a name="[45b]"></a>RM_3508_ParamInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_Init
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RM_3508_Init
</UL>

<P><STRONG><a name="[40c]"></a>Fric_3508_Init</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Fric_3508_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RM_3508_ParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_SetPID
</UL>

<P><STRONG><a name="[45c]"></a>CHAS_ParamInit</STRONG> (Thumb, 590 bytes, Stack size 0 bytes, motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RM_3508_Init
</UL>

<P><STRONG><a name="[3e9]"></a>RM_3508_Init</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RM_3508_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_ParamInit
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RM_3508_ParamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MOTOR_Init
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_RC_Ctrl
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_KET_Ctrl
</UL>

<P><STRONG><a name="[b0]"></a>MOTOR_Init</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MOTOR_Init &rArr; M_2006_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_2006_Init
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_Init
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RM_3508_Init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GM_6020_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[387]"></a>Slow</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_LR_Ctrl
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FB_Ctrl
</UL>

<P><STRONG><a name="[3d5]"></a>MotorSlow</STRONG> (Thumb, 216 bytes, Stack size 0 bytes, motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SetMotorSpeed
</UL>

<P><STRONG><a name="[5ff]"></a>global_slow</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, motor.o(.text), UNUSED)

<P><STRONG><a name="[461]"></a>Update_prev_Imu_Yaw</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, my_imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Ctrl
</UL>

<P><STRONG><a name="[462]"></a>Update_prev_Imu_Pit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, my_imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Ctrl
</UL>

<P><STRONG><a name="[45d]"></a>Gimbal_Measure_Data</STRONG> (Thumb, 218 bytes, Stack size 8 bytes, my_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Gimbal_Measure_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Ctrl
</UL>

<P><STRONG><a name="[460]"></a>Speed_Filter</STRONG> (Thumb, 446 bytes, Stack size 12 bytes, my_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Speed_Filter
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Ctrl
</UL>

<P><STRONG><a name="[45f]"></a>IMU_angle_process</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, my_imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_get_angle_to_use
</UL>

<P><STRONG><a name="[45e]"></a>IMU_get_angle_to_use</STRONG> (Thumb, 402 bytes, Stack size 24 bytes, my_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = IMU_get_angle_to_use &rArr; BMI_Get_EulerAngle &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_RawData
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;micros
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_angle_process
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Ctrl
</UL>

<P><STRONG><a name="[d5]"></a>IMU_Ctrl</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, my_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = IMU_Ctrl &rArr; IMU_get_angle_to_use &rArr; BMI_Get_EulerAngle &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_get_angle_to_use
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_Filter
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Measure_Data
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_prev_Imu_Pit
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_prev_Imu_Yaw
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_TASK
</UL>

<P><STRONG><a name="[463]"></a>Static_Error_Calculate</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, my_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Static_Error_Calculate &rArr; BMI_Get_GRO &rArr; MPU_Read_Byte &rArr; IIC_Read_Byte &rArr; IIC_NAck &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_GRO
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init
</UL>

<P><STRONG><a name="[b1]"></a>IMU_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, my_imu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = IMU_Init &rArr; BMI_Init &rArr; Set_accel &rArr; bmi2_get_sensor_config &rArr; get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Static_Error_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[289]"></a>Report_prev_imu_yaw_angle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, my_imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAngle
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoAim_ON
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_AIM_Ctrl
</UL>

<P><STRONG><a name="[28a]"></a>Report_prev_imu_pit_angle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, my_imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTO_AIM_Ctrl
</UL>

<P><STRONG><a name="[2d4]"></a>Report_YawSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, my_imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_IMU_Info
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_YawData_Report
</UL>

<P><STRONG><a name="[282]"></a>Report_YawAngle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, my_imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Reset
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_YawData_Report
</UL>

<P><STRONG><a name="[3bd]"></a>Report_PitSpeed</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, my_imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_PitData_Report
</UL>

<P><STRONG><a name="[283]"></a>Report_PitAngle</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, my_imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Vision_Reset
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_PitData_Report
</UL>

<P><STRONG><a name="[324]"></a>IF_IMU_InitOver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, my_imu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_Ctrl
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_StateSync
</UL>

<P><STRONG><a name="[600]"></a>PID_Debug</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pid.o(.text), UNUSED)

<P><STRONG><a name="[393]"></a>PID_Algorithm</STRONG> (Thumb, 318 bytes, Stack size 8 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PID_Algorithm
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anti_constrain
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;constrain
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GetOutput
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_GetOutput
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Get_Zerror
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_Get_Z_Speed
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_GetOutput
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_GetOutput
</UL>

<P><STRONG><a name="[465]"></a>Judge_PID_Type</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_Ctrl
</UL>

<P><STRONG><a name="[da]"></a>PID_Ctrl</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, pid.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PID_Ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_PID_Type
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_TASK
</UL>

<P><STRONG><a name="[d9]"></a>PID_GET_Info</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_TASK
</UL>

<P><STRONG><a name="[db]"></a>PID_Reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_TASK
</UL>

<P><STRONG><a name="[3c0]"></a>GET_PID_Type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pid.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_GET_Info
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_GET_Info
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_GET_Info
</UL>

<P><STRONG><a name="[468]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[497]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[494]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
</UL>

<P><STRONG><a name="[49e]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[49a]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRemoveFromUnorderedEventList
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
</UL>

<P><STRONG><a name="[466]"></a>xQueueGenericReset</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[46a]"></a>xQueueGenericCreate</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[471]"></a>xQueueGenericSend</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[478]"></a>xQueueCreateMutex</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
</UL>

<P><STRONG><a name="[479]"></a>xQueueGiveMutexRecursive</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[47c]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 434 bytes, Stack size 40 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
</UL>

<P><STRONG><a name="[481]"></a>xQueueTakeMutexRecursive</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetCurrentTaskHandle
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[482]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[483]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[485]"></a>xQueueGiveFromISR</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[487]"></a>xQueueReceive</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[488]"></a>xQueuePeek</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[489]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 202 bytes, Stack size 40 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[48a]"></a>xQueuePeekFromISR</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[48b]"></a>uxQueueMessagesWaiting</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[48c]"></a>uxQueueSpacesAvailable</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[601]"></a>uxQueueMessagesWaitingFromISR</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[48e]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[48d]"></a>vQueueDelete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
</UL>

<P><STRONG><a name="[602]"></a>uxQueueGetQueueNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[603]"></a>vQueueSetQueueNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[604]"></a>ucQueueGetQueueType</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[605]"></a>xQueueIsQueueEmptyFromISR</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[606]"></a>xQueueIsQueueFullFromISR</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[4c3]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[607]"></a>pcQueueGetName</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)

<P><STRONG><a name="[490]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[fd]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_Init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Task
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[fe]"></a>vTaskDelete</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Task
</UL>

<P><STRONG><a name="[49c]"></a>xTaskIncrementTick</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[476]"></a>xTaskResumeAll</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[473]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[c8]"></a>vTaskDelayUntil</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SONIC_TASK
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSUI_TASK
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZIGBEE_TASK
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASTERLINK_TASK
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_TRIGGER_TASK
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_TASK
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_TASK
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_TASK
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_TASK
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_TASK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASSIS_TASK
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_TASK
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_STATE_TASK
</UL>

<P><STRONG><a name="[f8]"></a>vTaskDelay</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[49f]"></a>eTaskGetState</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[4a0]"></a>uxTaskPriorityGet</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[4a1]"></a>uxTaskPriorityGetFromISR</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[4a2]"></a>vTaskPrioritySet</STRONG> (Thumb, 324 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[8b]"></a>vTaskSwitchContext</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[4a3]"></a>vTaskSuspend</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>

<P><STRONG><a name="[4a4]"></a>vTaskResume</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
</UL>

<P><STRONG><a name="[4a6]"></a>xTaskResumeFromISR</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[100]"></a>vTaskStartScheduler</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_Init
</UL>

<P><STRONG><a name="[4aa]"></a>vTaskEndScheduler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEndScheduler
</UL>

<P><STRONG><a name="[c3]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SONIC_TASK
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSUI_TASK
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZIGBEE_TASK
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MASTERLINK_TASK
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_TRIGGER_TASK
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PID_TASK
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_TASK
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_TASK
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_TASK
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODULE_TASK
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHASSIS_TASK
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIMBAL_TASK
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_STATE_TASK
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[4ac]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[608]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[609]"></a>pcTaskGetName</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[4ad]"></a>vTaskGetInfo</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskCheckFreeStackSpace
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[4b0]"></a>uxTaskGetSystemState</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[475]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[4b1]"></a>vTaskPlaceOnUnorderedEventList</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[491]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[467]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[4b2]"></a>vTaskRemoveFromUnorderedEventList</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[4b3]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[472]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[474]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[46d]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[60a]"></a>uxTaskGetTaskNumber</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[60b]"></a>vTaskSetTaskNumber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[47a]"></a>xTaskGetCurrentTaskHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueTakeMutexRecursive
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveMutexRecursive
</UL>

<P><STRONG><a name="[ac]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[47e]"></a>xTaskPriorityInherit</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[470]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[480]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[60c]"></a>uxTaskResetEventItemValue</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)

<P><STRONG><a name="[47d]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[4b4]"></a>ulTaskNotifyTake</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[4b5]"></a>xTaskNotifyWait</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[4b6]"></a>xTaskGenericNotify</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>

<P><STRONG><a name="[4b7]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[4b8]"></a>vTaskNotifyGiveFromISR</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[4b9]"></a>xTaskNotifyStateClear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[4bb]"></a>xTimerGenericCommand</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>

<P><STRONG><a name="[4a8]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[4c5]"></a>xTimerCreate</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
</UL>

<P><STRONG><a name="[60d]"></a>xTimerGetTimerDaemonTaskHandle</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[60e]"></a>xTimerGetPeriod</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[4c6]"></a>vTimerSetReloadMode</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[60f]"></a>xTimerGetExpiryTime</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[610]"></a>pcTimerGetName</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[4c7]"></a>xTimerIsTimerActive</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[4c8]"></a>pvTimerGetTimerID</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[4c9]"></a>vTimerSetTimerID</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>

<P><STRONG><a name="[611]"></a>uxTimerGetTimerNumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[612]"></a>vTimerSetTimerNumber</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timers.o(.text), UNUSED)

<P><STRONG><a name="[46b]"></a>pvPortMalloc</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[48f]"></a>vPortFree</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[613]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[614]"></a>xPortGetMinimumEverFreeHeapSize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[615]"></a>vPortInitialiseBlocks</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heap_4.o(.text), UNUSED)

<P><STRONG><a name="[498]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[4cc]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[4a9]"></a>xPortStartScheduler</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvEnableVFP
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[4ab]"></a>vPortEndScheduler</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, port.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEndScheduler
</UL>

<P><STRONG><a name="[fc]"></a>vPortEnterCritical</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Task
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetReloadMode
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[ff]"></a>vPortExitCritical</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, port.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Start_Task
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetTimerID
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTimerGetTimerID
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerIsTimerActive
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTimerSetReloadMode
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyStateClear
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPrioritySet
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGet
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueSpacesAvailable
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxQueueMessagesWaiting
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[ad]"></a>xPortSysTickHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[484]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskNotifyGiveFromISR
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskPriorityGetFromISR
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[3de]"></a>arm_cos_f32</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, arm_cos_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Measure_Data
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_GetSpeed_FB
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_GetSpeed_LR
</UL>

<P><STRONG><a name="[3df]"></a>arm_sin_f32</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, arm_sin_f32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gimbal_Measure_Data
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_GetSpeed_FB
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIN_GetSpeed_LR
</UL>

<P><STRONG><a name="[616]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>

<P><STRONG><a name="[17a]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[304]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_char
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZIGBEE_SendData
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_ReadData
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZIGBEE_ReceiveData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_CHAS_Data
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshortstem_aim_4
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshort_aim_3
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshort_aim_2
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowlong_aim_
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_high_aim_
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_supercapacitor_update
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_Init
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_Info_update
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_SendData
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_PID_Switch
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_PID_Switch
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_PID_Switch
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_aim_line
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_bullet_int_update
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_gimbal_angle_update
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_aim_update
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_delete_update
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char_Graphic
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judege_read_data
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[4d2]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[617]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[496]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ZIGBEE_SendData
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream4_IRQHandler
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VISION_SendData
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CHAS_SetEmpty
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_SetEmpty
</UL>

<P><STRONG><a name="[4d5]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[4d4]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[247]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIFLE_Reset
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_accel_foc
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_foc_accel_axis
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fric_3508_Reset
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_InfoInit
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_InfoReset
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
</UL>

<P><STRONG><a name="[618]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[619]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[4d6]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[61a]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[0]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[61b]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[61c]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[4d0]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[61d]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[61e]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[4d1]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[4d8]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[7f]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[4da]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[4db]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[4dd]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[4d3]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[61f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[620]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[621]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[622]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4e0]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[623]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4dc]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[624]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[625]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[4d7]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[4d9]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[81]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[86]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[4df]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[4de]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[4e3]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[4e8]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[175]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_asin &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[4f0]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[172]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[4ea]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[4e5]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[4f1]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[4e7]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[4e9]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[4f2]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[4ec]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[4ee]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[626]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[627]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[628]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[629]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[62a]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[174]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[4f4]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4e6]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[4f7]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4fc]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[4eb]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[4fa]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[38d]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate_state
</UL>

<P><STRONG><a name="[62b]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[62c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[4fb]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[4ff]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[173]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[4fd]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[4f6]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[4f9]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[38e]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GIM_Calibrate_state
</UL>

<P><STRONG><a name="[4fe]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[4ed]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[500]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[4f3]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[4ef]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[502]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Judge_IF_NAN
</UL>

<P><STRONG><a name="[503]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[504]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[7d]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[62d]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[62e]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[4f5]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[9a]"></a>TI4_Config</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[98]"></a>TI3_Config</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[96]"></a>TI2_Config</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[94]"></a>TI1_Config</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, stm32f4xx_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[a6]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a9]"></a>CheckITStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_GetITStatus
</UL>

<P><STRONG><a name="[e6]"></a>cycleCounterInit</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systemInit
</UL>

<P><STRONG><a name="[170]"></a>lsb_to_mps2</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[16f]"></a>lsb_to_dps</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, bmi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BMI_Get_EulerAngle
</UL>

<P><STRONG><a name="[178]"></a>null_ptr_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bmi2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_act_recg_sett
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_act_recg_sett
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_gyro_foc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_accel_foc
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_gyro_cross_sense
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_act_recog_output
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_gyro_offset_comp_axes
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_gyro_offset_comp_axes
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_gyro_offset_comp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_gyro_user_gain
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_update_gyro_user_gain
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_remap_axes
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_remap_axes
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_feat_int
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_accel_self_test
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_sync_commands
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_ois_interface
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_aux_interleaved
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_aux_man_mode
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_aux_man_mode
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_fifo_length
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_fifo_down_sample
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_down_sample
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_fifo_filter_data
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_filter_data
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_fifo_wm
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_wm
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_fifo_self_wake_up
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_self_wake_up
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_command_register
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_aux
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_gyro
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_accel
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_fifo_data
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_fifo_config
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_config
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_int_status
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_int_pin_config
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_int_pin_config
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_adv_power_save
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_disable
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_config_file_version
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sec_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_soft_reset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_internal_status
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_prepare_setup
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_gyro_st_update_result
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_crt_download
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rdy_for_dl
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_st_running
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_running
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_foc_position
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_config
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_config
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_config
</UL>

<P><STRONG><a name="[17e]"></a>set_config_load</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = set_config_load &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
</UL>

<P><STRONG><a name="[17f]"></a>upload_file</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = upload_file &rArr; bmi2_set_regs
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_crt_config_file
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_config_file
</UL>

<P><STRONG><a name="[180]"></a>write_config_file</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = write_config_file &rArr; bmi2_set_adv_power_save &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_file
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_config_load
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_config_file
</UL>

<P><STRONG><a name="[185]"></a>extract_config_file</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_config_file_version
</UL>

<P><STRONG><a name="[188]"></a>set_free_fall_det</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_free_fall_det &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[189]"></a>set_primary_ois_low_pass_filter</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_primary_ois_low_pass_filter &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[18a]"></a>set_feat_accel_self_test</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_feat_accel_self_test &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[18b]"></a>set_act_recog</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_act_recog &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[18c]"></a>set_wrist_wear_wake_up_wh</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_wrist_wear_wake_up_wh &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[18d]"></a>set_wrist_gesture_wh</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_wrist_gesture_wh &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[18e]"></a>set_wrist_wear_wake_up</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_wrist_wear_wake_up &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[18f]"></a>set_wrist_gesture</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_wrist_gesture &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[190]"></a>set_gyro_self_offset_corr</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_gyro_self_offset_corr &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[191]"></a>set_ext_sens_sync</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_ext_sens_sync &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[192]"></a>set_flat</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_flat &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[193]"></a>set_low_g</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_low_g &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[194]"></a>set_high_g</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_high_g &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[195]"></a>set_orientation</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_orientation &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[196]"></a>set_triple_tap</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_triple_tap &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[197]"></a>set_double_tap</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_double_tap &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[198]"></a>set_single_tap</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_single_tap &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[199]"></a>set_wake_up</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_wake_up &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[19a]"></a>set_glance_detector</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_glance_detector &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[19b]"></a>set_up_hold_to_wake</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_up_hold_to_wake &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[19c]"></a>set_tilt</STRONG> (Thumb, 100 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_tilt &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[19d]"></a>set_gyro_user_gain</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_gyro_user_gain &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[19e]"></a>set_step_activity</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_step_activity &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[19f]"></a>set_step_counter</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_step_counter &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1a0]"></a>set_step_detector</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_step_detector &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1a1]"></a>set_no_motion</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_no_motion &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1a2]"></a>set_any_motion</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_any_motion &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1a3]"></a>set_sig_motion</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = set_sig_motion &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_disable
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_enable
</UL>

<P><STRONG><a name="[1a4]"></a>sensor_enable</STRONG> (Thumb, 1606 bytes, Stack size 32 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = sensor_enable &rArr; set_sig_motion &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detector
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_single_tap
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_double_tap
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_triple_tap
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orientation
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture_wh
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_act_recog
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_accel_self_test
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_primary_ois_low_pass_filter
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
</UL>

<P><STRONG><a name="[1a5]"></a>select_sensor</STRONG> (Thumb, 620 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = select_sensor
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_disable
</UL>

<P><STRONG><a name="[1a6]"></a>sensor_disable</STRONG> (Thumb, 1556 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sig_motion
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_any_motion
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_no_motion
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_detector
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_counter
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_step_activity
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_user_gain
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tilt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_up_hold_to_wake
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_glance_detector
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wake_up
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_single_tap
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_double_tap
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_triple_tap
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_orientation
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_high_g
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_low_g
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_flat
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ext_sens_sync
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_self_offset_corr
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_gesture_wh
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wrist_wear_wake_up_wh
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_act_recog
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_feat_accel_self_test
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_free_fall_det
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_disable
</UL>

<P><STRONG><a name="[1a8]"></a>set_free_fall_det_config</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_free_fall_det_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1a9]"></a>set_primary_ois_config</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_primary_ois_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1aa]"></a>set_wrist_wear_wake_up_wh_config</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_wrist_wear_wake_up_wh_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1ab]"></a>set_wrist_gest_w_config</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_wrist_gest_w_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1ac]"></a>set_wrist_wear_wake_up_config</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_wrist_wear_wake_up_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1ad]"></a>set_wrist_gest_config</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_wrist_gest_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1ae]"></a>set_ext_sens_sync_config</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_ext_sens_sync_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1af]"></a>set_flat_config</STRONG> (Thumb, 238 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_flat_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1b0]"></a>set_low_g_config</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_low_g_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1b1]"></a>set_high_g_config</STRONG> (Thumb, 270 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_high_g_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1b2]"></a>set_orient_config</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_orient_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1b3]"></a>set_wake_up_config</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_wake_up_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1b4]"></a>set_glance_detect_config</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_glance_detect_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1b5]"></a>set_up_hold_to_wake_config</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_up_hold_to_wake_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1b6]"></a>set_tilt_config</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_tilt_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1b7]"></a>set_gyro_user_gain_config</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_gyro_user_gain_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1b8]"></a>set_step_config</STRONG> (Thumb, 248 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_step_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1b9]"></a>set_step_count_params_config</STRONG> (Thumb, 272 bytes, Stack size 88 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = set_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1ba]"></a>set_sig_motion_config</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_sig_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1bb]"></a>set_no_motion_config</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_no_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1bc]"></a>set_any_motion_config</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = set_any_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1bd]"></a>config_aux</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = config_aux &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
</UL>

<P><STRONG><a name="[1bf]"></a>config_aux_interface</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = config_aux_interface &rArr; bmi2_get_status &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
</UL>

<P><STRONG><a name="[1c0]"></a>set_aux_interface</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = set_aux_interface &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
</UL>

<P><STRONG><a name="[1c2]"></a>check_boundary_val</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = check_boundary_val
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_bw_perf_mode
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_odr_range
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_gyro_config
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_aux_config
</UL>

<P><STRONG><a name="[1c1]"></a>validate_aux_config</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = validate_aux_config &rArr; check_boundary_val
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_config
</UL>

<P><STRONG><a name="[1c3]"></a>set_aux_config</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = set_aux_config &rArr; config_aux_interface &rArr; bmi2_get_status &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_aux_config
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_aux_interface
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux_interface
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_aux
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
</UL>

<P><STRONG><a name="[1c4]"></a>cfg_error_status</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cfg_error_status &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
</UL>

<P><STRONG><a name="[1c5]"></a>validate_gyro_config</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = validate_gyro_config &rArr; check_boundary_val
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
</UL>

<P><STRONG><a name="[1c6]"></a>set_gyro_config</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = set_gyro_config &rArr; cfg_error_status &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_gyro_config
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_error_status
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_gyro_config
</UL>

<P><STRONG><a name="[1c7]"></a>validate_odr_range</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = validate_odr_range &rArr; check_boundary_val
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
</UL>

<P><STRONG><a name="[1c8]"></a>validate_bw_perf_mode</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = validate_bw_perf_mode &rArr; check_boundary_val
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_boundary_val
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
</UL>

<P><STRONG><a name="[1c9]"></a>set_accel_config</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = set_accel_config &rArr; cfg_error_status &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_bw_perf_mode
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_odr_range
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cfg_error_status
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restore_accel_foc_config
</UL>

<P><STRONG><a name="[1ca]"></a>get_free_fall_det_config</STRONG> (Thumb, 176 bytes, Stack size 64 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = get_free_fall_det_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1cb]"></a>get_primary_ois_config</STRONG> (Thumb, 110 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_primary_ois_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1cc]"></a>get_wrist_wear_wake_up_wh_config</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_wrist_wear_wake_up_wh_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1cd]"></a>get_wrist_gest_w_config</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_wrist_gest_w_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1ce]"></a>get_wrist_wear_wake_up_config</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_wrist_wear_wake_up_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1cf]"></a>get_wrist_gest_config</STRONG> (Thumb, 144 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_wrist_gest_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1d0]"></a>get_ext_sens_sync_config</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_ext_sens_sync_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1d1]"></a>get_flat_config</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_flat_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1d2]"></a>get_low_g_config</STRONG> (Thumb, 204 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_low_g_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1d3]"></a>get_high_g_config</STRONG> (Thumb, 222 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_high_g_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1d4]"></a>get_orient_config</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_orient_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1d5]"></a>get_wake_up_config</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_wake_up_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1d6]"></a>get_glance_detect_config</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_glance_detect_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1d7]"></a>get_up_hold_to_wake_config</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_up_hold_to_wake_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1d8]"></a>get_tilt_config</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_tilt_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1d9]"></a>get_gyro_gain_update_config</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_gyro_gain_update_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1da]"></a>get_step_config</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_step_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1db]"></a>get_step_count_params_config</STRONG> (Thumb, 220 bytes, Stack size 96 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = get_step_count_params_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1dc]"></a>get_no_motion_config</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_no_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1dd]"></a>get_any_motion_config</STRONG> (Thumb, 180 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_any_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1de]"></a>get_sig_motion_config</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_sig_motion_config &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1df]"></a>get_aux_cfg</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_aux_cfg &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_config
</UL>

<P><STRONG><a name="[1e0]"></a>get_aux_interface_config</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_aux_interface_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_config
</UL>

<P><STRONG><a name="[1e1]"></a>get_aux_interface</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_aux_interface &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_config
</UL>

<P><STRONG><a name="[1e2]"></a>get_aux_config</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = get_aux_config &rArr; get_aux_interface &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_interface
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_interface_config
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_aux_cfg
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
</UL>

<P><STRONG><a name="[1e3]"></a>get_gyro_config</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_gyro_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_gyro_config
</UL>

<P><STRONG><a name="[1e4]"></a>get_accel_config</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = get_accel_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_accel_foc_config
</UL>

<P><STRONG><a name="[1e6]"></a>extract_output_feat_config</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_counter_output
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_step_activity_output
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_orient_output
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_high_g_output
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_nvm_error_status
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_vfrm_error_status
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_wrist_gest_status
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_cross_sense
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_self_test_status
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ois_output
</UL>

<P><STRONG><a name="[1e5]"></a>get_ois_output</STRONG> (Thumb, 266 bytes, Stack size 56 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = get_ois_output &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1e7]"></a>get_accel_self_test_status</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_accel_self_test_status &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1e8]"></a>get_gyro_cross_sense</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_gyro_cross_sense &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1e9]"></a>get_wrist_gest_status</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_wrist_gest_status &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1ea]"></a>get_vfrm_error_status</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_vfrm_error_status &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1eb]"></a>get_nvm_error_status</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_nvm_error_status &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1ec]"></a>get_gyro_gain_update_status</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_gyro_gain_update_status &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_gyro_st_update_result
</UL>

<P><STRONG><a name="[1ed]"></a>get_high_g_output</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_high_g_output &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1ee]"></a>get_orient_output</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_orient_output &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1ef]"></a>get_step_activity_output</STRONG> (Thumb, 82 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_step_activity_output &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1f0]"></a>get_step_counter_output</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_step_counter_output &rArr; bmi2_get_feat_config &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_output_feat_config
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1f1]"></a>read_aux_data_mode</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = read_aux_data_mode &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1f5]"></a>get_remapped_data</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_remapped_data
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_gyro_data
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_accel_data
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_sensor_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_sensor_data
</UL>

<P><STRONG><a name="[1f4]"></a>comp_gyro_cross_axis_sensitivity</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = comp_gyro_cross_axis_sensitivity
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_gyro_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_sensor_data
</UL>

<P><STRONG><a name="[1f3]"></a>get_acc_gyr_data</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = get_acc_gyr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_sensor_data
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_sensor_data
</UL>

<P><STRONG><a name="[1f2]"></a>get_gyro_sensor_data</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_gyro_sensor_data &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acc_gyr_data
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_gyro_cross_axis_sensitivity
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remapped_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1f6]"></a>get_accel_sensor_data</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, bmi2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = get_accel_sensor_data &rArr; bmi2_get_regs &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_acc_gyr_data
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remapped_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
</UL>

<P><STRONG><a name="[1fc]"></a>set_maxburst_len</STRONG> (Thumb, 196 bytes, Stack size 64 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_config
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_gyro_st_update_result
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_crt_config_file
</UL>

<P><STRONG><a name="[1fd]"></a>get_maxburst_len</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_config
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
</UL>

<P><STRONG><a name="[201]"></a>reset_fifo_frame_structure</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_fifo_data
</UL>

<P><STRONG><a name="[207]"></a>move_next_frame</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_act_recog_output
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_if_s4s_frame
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_aux_header_mode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_gyro_header_mode
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_accel_header_mode
</UL>

<P><STRONG><a name="[209]"></a>unpack_skipped_frame</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_aux_header_mode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_gyro_header_mode
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_accel_header_mode
</UL>

<P><STRONG><a name="[208]"></a>unpack_sensortime_frame</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_aux_header_mode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_gyro_header_mode
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_accel_header_mode
</UL>

<P><STRONG><a name="[204]"></a>unpack_virt_sensor_time</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_gyro_frame
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_accel_frame
</UL>

<P><STRONG><a name="[202]"></a>unpack_accel_data</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remapped_data
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_accel_frame
</UL>

<P><STRONG><a name="[203]"></a>unpack_accel_frame</STRONG> (Thumb, 620 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_accel_data
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_virt_sensor_time
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_accel
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_accel_header_mode
</UL>

<P><STRONG><a name="[206]"></a>parse_if_virtual_header</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_aux_header_mode
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_gyro_header_mode
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_accel_header_mode
</UL>

<P><STRONG><a name="[205]"></a>extract_accel_header_mode</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_if_virtual_header
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_accel_frame
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_sensortime_frame
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_skipped_frame
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_next_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_accel
</UL>

<P><STRONG><a name="[20c]"></a>check_empty_fifo</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_aux
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_gyro
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_accel
</UL>

<P><STRONG><a name="[20b]"></a>parse_fifo_accel_len</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_accel
</UL>

<P><STRONG><a name="[20d]"></a>unpack_gyro_data</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_gyro_cross_axis_sensitivity
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_remapped_data
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_gyro_frame
</UL>

<P><STRONG><a name="[20e]"></a>unpack_gyro_frame</STRONG> (Thumb, 616 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_gyro_data
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_virt_sensor_time
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_gyro
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_gyro_header_mode
</UL>

<P><STRONG><a name="[20f]"></a>extract_gyro_header_mode</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_gyro_frame
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_if_virtual_header
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_sensortime_frame
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_skipped_frame
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_next_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_gyro
</UL>

<P><STRONG><a name="[211]"></a>parse_fifo_gyro_len</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_gyro
</UL>

<P><STRONG><a name="[214]"></a>unpack_virt_aux_sensor_time</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_aux_frame
</UL>

<P><STRONG><a name="[213]"></a>unpack_aux_data</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_aux_frame
</UL>

<P><STRONG><a name="[212]"></a>unpack_aux_frame</STRONG> (Thumb, 600 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_aux_data
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_virt_aux_sensor_time
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_aux
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extract_aux_header_mode
</UL>

<P><STRONG><a name="[215]"></a>extract_aux_header_mode</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_aux_frame
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_if_virtual_header
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_sensortime_frame
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_skipped_frame
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_next_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_aux
</UL>

<P><STRONG><a name="[217]"></a>parse_fifo_aux_len</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_aux
</UL>

<P><STRONG><a name="[222]"></a>set_if_aux_not_busy</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_aux_data
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_aux_data
</UL>

<P><STRONG><a name="[223]"></a>read_aux_data</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if_aux_not_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_aux_man_mode
</UL>

<P><STRONG><a name="[225]"></a>map_read_len</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_read_aux_man_mode
</UL>

<P><STRONG><a name="[226]"></a>write_aux_data</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_if_aux_not_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_aux_interleaved
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_write_aux_man_mode
</UL>

<P><STRONG><a name="[234]"></a>validate_self_test</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_accel_self_test
</UL>

<P><STRONG><a name="[22c]"></a>power</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_accel_foc
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_accel_offset
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_lsb_g
</UL>

<P><STRONG><a name="[22b]"></a>convert_lsb_g</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_accel_self_test
</UL>

<P><STRONG><a name="[22d]"></a>read_accel_xyz</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_accel_self_test
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_accel_foc
</UL>

<P><STRONG><a name="[22e]"></a>set_acc_self_test_sign</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test_config
</UL>

<P><STRONG><a name="[22f]"></a>set_accel_self_test_enable</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;self_test_config
</UL>

<P><STRONG><a name="[230]"></a>self_test_config</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_self_test_enable
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_acc_self_test_sign
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_accel_self_test
</UL>

<P><STRONG><a name="[231]"></a>set_accel_self_test_amp</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_self_test_config
</UL>

<P><STRONG><a name="[232]"></a>pre_self_test_config</STRONG> (Thumb, 108 bytes, Stack size 72 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_sensor_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_self_test_amp
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_accel_self_test
</UL>

<P><STRONG><a name="[236]"></a>map_feat_int</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_map_feat_int
</UL>

<P><STRONG><a name="[237]"></a>get_remap_axes</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_remap_axes
</UL>

<P><STRONG><a name="[239]"></a>set_remap_axes</STRONG> (Thumb, 254 bytes, Stack size 80 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_remap_axes
</UL>

<P><STRONG><a name="[23b]"></a>enable_gyro_gain</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_update_gyro_user_gain
</UL>

<P><STRONG><a name="[23c]"></a>get_user_gain_upd_status</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_update_gyro_user_gain
</UL>

<P><STRONG><a name="[244]"></a>unpack_act_recog_output</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_act_recog_output
</UL>

<P><STRONG><a name="[242]"></a>move_if_s4s_frame</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_next_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_act_recog_output
</UL>

<P><STRONG><a name="[246]"></a>validate_foc_accel_axis</STRONG> (Thumb, 142 bytes, Stack size 72 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_config
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_foc_position
</UL>

<P><STRONG><a name="[248]"></a>validate_foc_position</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_foc_accel_axis
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_foc_position
</UL>

<P><STRONG><a name="[249]"></a>get_average_of_sensor_data</STRONG> (Thumb, 252 bytes, Stack size 56 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_sensor_data
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_foc_position
</UL>

<P><STRONG><a name="[24a]"></a>verify_foc_position</STRONG> (Thumb, 180 bytes, Stack size 64 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_average_of_sensor_data
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_foc_position
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_gyro_foc
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_accel_foc
</UL>

<P><STRONG><a name="[24b]"></a>restore_accel_foc_config</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_accel_foc
</UL>

<P><STRONG><a name="[24c]"></a>set_accel_offset_comp</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_foc_config
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_accel_foc
</UL>

<P><STRONG><a name="[24d]"></a>write_accel_offset</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_accel_foc
</UL>

<P><STRONG><a name="[253]"></a>invert_accel_offset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_accel_foc
</UL>

<P><STRONG><a name="[24f]"></a>get_bit_pos_3_9mg</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_accel_offset
</UL>

<P><STRONG><a name="[24e]"></a>scale_accel_offset</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_bit_pos_3_9mg
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_accel_foc
</UL>

<P><STRONG><a name="[252]"></a>comp_for_gravity</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_accel_foc
</UL>

<P><STRONG><a name="[251]"></a>map_accel_range</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;perform_accel_foc
</UL>

<P><STRONG><a name="[250]"></a>perform_accel_foc</STRONG> (Thumb, 382 bytes, Stack size 1616 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_status
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_accel_range
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comp_for_gravity
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scale_accel_offset
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invert_accel_offset
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_accel_offset
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_offset_comp
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_accel_xyz
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;power
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_accel_foc
</UL>

<P><STRONG><a name="[254]"></a>set_accel_foc_config</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_accel_offset_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_accel_foc
</UL>

<P><STRONG><a name="[255]"></a>save_accel_foc_config</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_adv_power_save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_accel_foc
</UL>

<P><STRONG><a name="[257]"></a>restore_gyro_config</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gyro_config
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_gyro_foc
</UL>

<P><STRONG><a name="[25d]"></a>invert_gyro_offset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_gyro_foc
</UL>

<P><STRONG><a name="[25c]"></a>saturate_gyro_data</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_gyro_foc
</UL>

<P><STRONG><a name="[258]"></a>read_gyro_xyz</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_gyro_foc
</UL>

<P><STRONG><a name="[259]"></a>set_gyro_foc_config</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_gyro_offset_comp
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_gyro_foc
</UL>

<P><STRONG><a name="[25a]"></a>save_gyro_config</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_adv_power_save
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_config
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_perform_gyro_foc
</UL>

<P><STRONG><a name="[260]"></a>get_st_running</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_abort_crt_gyro_st
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_st_running
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_rdy_for_dl_toggle
</UL>

<P><STRONG><a name="[261]"></a>set_st_running</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
</UL>

<P><STRONG><a name="[262]"></a>get_rdy_for_dl</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_crt_download
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_rdy_for_dl_toggle
</UL>

<P><STRONG><a name="[263]"></a>wait_rdy_for_dl_toggle</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rdy_for_dl
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_running
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_crt_download
</UL>

<P><STRONG><a name="[264]"></a>process_crt_download</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_rdy_for_dl_toggle
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rdy_for_dl
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_crt_config_file
</UL>

<P><STRONG><a name="[265]"></a>write_crt_config_file</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_crt_download
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_maxburst_len
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;upload_file
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
</UL>

<P><STRONG><a name="[266]"></a>wait_st_running</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_running
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_abort_crt_gyro_st
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
</UL>

<P><STRONG><a name="[267]"></a>gyro_self_test_completed</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
</UL>

<P><STRONG><a name="[268]"></a>crt_gyro_st_update_result</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_maxburst_len
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_gyro_gain_update_status
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_abort_crt_gyro_st
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
</UL>

<P><STRONG><a name="[269]"></a>select_self_test</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
</UL>

<P><STRONG><a name="[26a]"></a>abort_bmi2</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_abort_crt_gyro_st
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_prepare_setup
</UL>

<P><STRONG><a name="[26b]"></a>crt_prepare_setup</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_enable
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_fifo_config
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_sensor_disable
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_bmi2
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_gtrigger_test
</UL>

<P><STRONG><a name="[26c]"></a>do_gtrigger_test</STRONG> (Thumb, 362 bytes, Stack size 48 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_adv_power_save
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_prepare_setup
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select_self_test
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crt_gyro_st_update_result
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test_completed
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_st_running
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_crt_config_file
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_rdy_for_dl_toggle
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_rdy_for_dl
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_st_running
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_running
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_maxburst_len
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_maxburst_len
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;null_ptr_check
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_do_crt
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_do_gyro_st
</UL>

<P><STRONG><a name="[26f]"></a>set_nvm_prep_prog</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, bmi2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_extract_input_feat_config
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_get_feat_config
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_set_regs
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi2_nvm_prog
</UL>

<P><STRONG><a name="[279]"></a>null_ptr_check</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bmi270.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bmi270_init
</UL>

<P><STRONG><a name="[303]"></a>Draw_char</STRONG> (Thumb, 540 bytes, Stack size 40 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Char_Graphic
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_Init
</UL>

<P><STRONG><a name="[305]"></a>clip_figure</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Figure_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Figure_bool
</UL>

<P><STRONG><a name="[307]"></a>spin_second_figure</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Figure_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Figure_bool
</UL>

<P><STRONG><a name="[308]"></a>auto_aim_third_figure</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Figure_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Figure_bool
</UL>

<P><STRONG><a name="[309]"></a>shootheatlimit_fourth_figure</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Figure_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Figure_bool
</UL>

<P><STRONG><a name="[30a]"></a>BlockMuch_fifth_figure</STRONG> (Thumb, 130 bytes, Stack size 48 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Figure_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Figure_bool
</UL>

<P><STRONG><a name="[30b]"></a>Bullet_Warning</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Figure_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Figure_bool
</UL>

<P><STRONG><a name="[30c]"></a>EMPTY</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Figure_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_Figure_bool
</UL>

<P><STRONG><a name="[30d]"></a>Draw_Figure_bool</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMPTY
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bullet_Warning
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlockMuch_fifth_figure
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shootheatlimit_fourth_figure
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_aim_third_figure
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_second_figure
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clip_figure
</UL>
<BR>[Called By]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_graphic_Info_update
</UL>

<P><STRONG><a name="[30f]"></a>sight_bead_figrue</STRONG> (Thumb, 126 bytes, Stack size 52 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Figure_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_aim_update
</UL>

<P><STRONG><a name="[311]"></a>supercapacitor_figure</STRONG> (Thumb, 238 bytes, Stack size 52 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Figure_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_supercapacitor_update
</UL>

<P><STRONG><a name="[312]"></a>gimbal_angle_float</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Float_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_gimbal_angle_update
</UL>

<P><STRONG><a name="[315]"></a>bullet_int</STRONG> (Thumb, 108 bytes, Stack size 44 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Int_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_bullet_int_update
</UL>

<P><STRONG><a name="[318]"></a>Draw_Figure_aimline</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Figure_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Client_aim_line
</UL>

<P><STRONG><a name="[31a]"></a>aim_1</STRONG> (Thumb, 446 bytes, Stack size 56 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Figure_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_high_aim_
</UL>

<P><STRONG><a name="[31b]"></a>aim_lowshort_2</STRONG> (Thumb, 444 bytes, Stack size 56 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Figure_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshort_aim_2
</UL>

<P><STRONG><a name="[31c]"></a>aim_lowshort_3</STRONG> (Thumb, 546 bytes, Stack size 56 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Figure_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshort_aim_3
</UL>

<P><STRONG><a name="[31d]"></a>aim_lowshort_stem</STRONG> (Thumb, 482 bytes, Stack size 56 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Figure_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowshortstem_aim_4
</UL>

<P><STRONG><a name="[31e]"></a>aim_lowlong</STRONG> (Thumb, 420 bytes, Stack size 52 bytes, referee.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Figure_Graphic
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lowlong_aim_
</UL>

<P><STRONG><a name="[469]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[46c]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[46e]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[46f]"></a>prvCopyDataToQueue</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[477]"></a>prvInitialiseMutex</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[47f]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, queue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[47b]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[486]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeekFromISR
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueuePeek
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[492]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[493]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[495]"></a>prvInitialiseNewTask</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[49b]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[499]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[49d]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnUnorderedEventList
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulTaskNotifyTake
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[4a5]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeFromISR
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[4a7]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[75]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text)
</UL>
<P><STRONG><a name="[4ae]"></a>prvTaskCheckFreeStackSpace</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[4af]"></a>prvListTasksWithinSingleList</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tasks.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[4ba]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[4bc]"></a>prvSwitchTimerLists</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[4bd]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[4be]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[4bf]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[4c0]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[4c1]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[76]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text)
</UL>
<P><STRONG><a name="[4c2]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, timers.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTimer
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[4c4]"></a>prvInitialiseNewTimer</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, timers.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreate
</UL>

<P><STRONG><a name="[4cb]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[4ca]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[77]"></a>prvTaskExitError</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, port.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text)
</UL>
<P><STRONG><a name="[501]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[4f8]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
